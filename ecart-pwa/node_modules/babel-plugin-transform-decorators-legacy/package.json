{
  "_args": [
    [
      {
        "raw": "babel-plugin-transform-decorators-legacy@^1.3.4",
        "scope": null,
        "escapedName": "babel-plugin-transform-decorators-legacy",
        "name": "babel-plugin-transform-decorators-legacy",
        "rawSpec": "^1.3.4",
        "spec": ">=1.3.4 <2.0.0",
        "type": "range"
      },
      "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli"
    ]
  ],
  "_from": "babel-plugin-transform-decorators-legacy@>=1.3.4 <2.0.0",
  "_id": "babel-plugin-transform-decorators-legacy@1.3.4",
  "_inCache": true,
  "_location": "/babel-plugin-transform-decorators-legacy",
  "_nodeVersion": "5.1.0",
  "_npmUser": {
    "name": "loganfsmyth",
    "email": "loganfsmyth@gmail.com"
  },
  "_npmVersion": "3.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-plugin-transform-decorators-legacy@^1.3.4",
    "scope": null,
    "escapedName": "babel-plugin-transform-decorators-legacy",
    "name": "babel-plugin-transform-decorators-legacy",
    "rawSpec": "^1.3.4",
    "spec": ">=1.3.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/preact-cli"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-transform-decorators-legacy/-/babel-plugin-transform-decorators-legacy-1.3.4.tgz",
  "_shasum": "741b58f6c5bce9e6027e0882d9c994f04f366925",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-transform-decorators-legacy@^1.3.4",
  "_where": "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli",
  "author": {
    "name": "Logan Smyth",
    "email": "loganfsmyth@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy/issues"
  },
  "dependencies": {
    "babel-plugin-syntax-decorators": "^6.1.18",
    "babel-runtime": "^6.2.0",
    "babel-template": "^6.3.0"
  },
  "description": "A plugin for Babel 6 that (mostly) replicates the old decorator behavior from Babel 5.",
  "devDependencies": {
    "babel-cli": "^6.2.0",
    "babel-plugin-transform-class-properties": "^6.3.0",
    "babel-plugin-transform-runtime": "^6.1.18",
    "babel-preset-es2015": "^6.1.18",
    "chai": "^3.4.1",
    "mocha": "^2.3.4"
  },
  "directories": {},
  "dist": {
    "shasum": "741b58f6c5bce9e6027e0882d9c994f04f366925",
    "tarball": "https://registry.npmjs.org/babel-plugin-transform-decorators-legacy/-/babel-plugin-transform-decorators-legacy-1.3.4.tgz"
  },
  "gitHead": "a3fc05f766dac8324a049ee03b3393fe3d055e14",
  "homepage": "https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy#readme",
  "keywords": [
    "babel",
    "babel-plugin",
    "es7",
    "decorators"
  ],
  "license": "MIT",
  "main": "lib",
  "maintainers": [
    {
      "name": "ide",
      "email": "ide+npm@jameside.com"
    },
    {
      "name": "loganfsmyth",
      "email": "loganfsmyth@gmail.com"
    }
  ],
  "name": "babel-plugin-transform-decorators-legacy",
  "optionalDependencies": {},
  "readme": "\n\n# Babel Legacy Decorator plugin\n\nThis is a plugin for Babel 6 that is meant to replicate the old decorator behavior from\nBabel 5 in order to allow people to more easily transition to Babel 6 without needing to\nbe blocked on updates to the decorator proposal or for Babel to re-implement it.\n\n## Why \"legacy\"?\n\nDecorators are still only a relatively new proposal, and they are (at least currently) still\nin flux. Many people have started to use them in their original form, where each decorator\nis essentially a function of the form\n\n    function(target, property, descriptor){}\n\nThis form is very likely to change moving forward, and Babel 6 did not wish to support\nthe older form when it was known that it would change in the future. As such, I created this\nplugin to help people transition to Babel 6 without requiring them to drop their decorators\nor requiring them to wait for the new proposal update and then update all their code.\n\n## Best Effort\n\nThis plugin is a best effort to be compatible with Babel 5's transpiler output, but there\nare a few things that were difficult to reproduce, and a few things that were simply incorrect\nin Babel 5 with respect to the decorators proposal.\n\nTwo main things to mention as differences, though not things you are likely to encounter:\n\n1. Decorators expressions are evaluated top to bottom, and executed bottom to top. e.g.\n\n    ```\n    function dec(id){\n        console.log('evaluated', id);\n        return (target, property, descriptor) => console.log('executed', id);\n    }\n\n    class Example {\n        @dec(1)\n        @dec(2)\n        method(){}\n    }\n    ```\n\n    In Babel 5, this would output:\n\n    ```\n    evaluated 2\n    evaluated 1\n    executed 2\n    executed 1\n    ```\n\n    With this plugin, it will result in:\n\n    ```\n    evaluated 1\n    evaluated 2\n    executed 2\n    executed 1\n    ```\n\n    which is what the spec dictates as the correct behavior and was incorrect in Babel 5.\n\n2. Static class property initializers are evaluated once up front.\n\n    If you decorate a static class property, you will get a descriptor with an `initializer` property.\n    However whereas with Babel 5 this could be re-executed multiple times with potentially differing\n    results, `decorators-legacy` will precompute the value and return an initializer that will\n    return that value. e.g.\n\n    ```\n    function dec(target, prop, descriptor){\n        let {initializer} = descriptor;\n        delete descriptor.initializer;\n        delete descriptor.writable;\n\n        descriptor.get = function(){\n            return initializer.call(this);\n        };\n    }\n\n    var i = 0;\n\n    class Example {\n        @dec\n        static prop = i++;\n    }\n    ```\n\n    In Babel 5, every access to `prop` would increment `i`.\n    In Babel 6, the very first value of `i` will be cached for future `initializer` calls.\n\n    The spec is a little vague around how initializers work for repeat calls, and I'd consider\n    calling an `initializer` multiple times to be a mistake in general, so hopefully this will\n    not cause anyone trouble.\n\n## License\n\nMIT (c) 2015\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy.git"
  },
  "scripts": {
    "build": "babel src -d lib",
    "prepublish": "npm run build",
    "test": "babel-node node_modules/.bin/_mocha -- test",
    "watch": "babel src -d lib -w"
  },
  "version": "1.3.4"
}
