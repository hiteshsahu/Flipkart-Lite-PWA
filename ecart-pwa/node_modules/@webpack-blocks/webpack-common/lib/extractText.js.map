{"version":3,"sources":["../src/extractText.js"],"names":["getLoaderConfigByType","getNonStyleLoaders","context","webpackConfig","fileType","loaderConfig","module","loaders","find","loader","String","test","Error","length","nonStyleLoaders","concat","shift"],"mappings":";;;;;AAAA;;;;;;QAOEA,qB,GAAAA,qB;QACAC,kB,GAAAA,kB;;AAGF;;;;;;;;AAOA,SAASD,qBAAT,CAAgCE,OAAhC,EAAyCC,aAAzC,EAAwDC,QAAxD,EAAkE;AAChE,QAAMC,eAAeF,cAAcG,MAAd,CAAqBC,OAArB,CAA6BC,IAA7B;AACnB;AACCC,QAAD,IAAYC,OAAOD,OAAOE,IAAd,MAAwBD,OAAOR,QAAQE,QAAR,CAAiBA,QAAjB,CAAP,CAFjB,CAArB;;AAKA,MAAIC,YAAJ,EAAkB;AAChB,WAAOA,YAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIO,KAAJ,CAAW,IAAER,QAAS,gDAAtB,CAAN;AACD;AACF;;AAED;;;;;;;;;;AAUA,SAASH,kBAAT,CAA6BI,YAA7B,EAA2CD,QAA3C,EAAqD;AACnD,MAAI,CAACC,aAAaE,OAAd,IAAyBF,aAAaE,OAAb,CAAqBM,MAArB,KAAgC,CAA7D,EAAgE;AAC9D,UAAM,IAAID,KAAJ,CAAW,OAAKR,QAAS,uBAAzB,CAAN;AACD;AACD,MAAI,CAAC,oBAAoBO,IAApB,CAAyBN,aAAaE,OAAb,CAAqB,CAArB,CAAzB,CAAL,EAAwD;AACtD,UAAM,IAAIK,KAAJ,CAAW,2EAAyEP,aAAaE,OAAb,CAAqB,CAArB,CAAwB,GAA5G,CAAN;AACD;;AAED;AACA,QAAMO,kBAAkB,GAAGC,MAAH,CAAUV,aAAaE,OAAvB,CAAxB;AACAO,kBAAgBE,KAAhB;;AAEA,SAAOF,eAAP;AACD","file":"extractText.js","sourcesContent":["/**\n * Extract-text webpack block.\n *\n * @see https://github.com/webpack/extract-text-webpack-plugin\n */\n\nexport {\n  getLoaderConfigByType,\n  getNonStyleLoaders\n}\n\n/**\n * @param {object}  context\n * @param {object}  webpackConfig\n * @param {string}  fileType\n * @return {object}\n * @throws {Error}\n */\nfunction getLoaderConfigByType (context, webpackConfig, fileType) {\n  const loaderConfig = webpackConfig.module.loaders.find(\n    // using string-based comparison here, since webpack-merge tends to deep-cloning things\n    (loader) => String(loader.test) === String(context.fileType(fileType))\n  )\n\n  if (loaderConfig) {\n    return loaderConfig\n  } else {\n    throw new Error(`${fileType} loader could not be found in webpack config.`)\n  }\n}\n\n/**\n * Finds the loader config for the given `fileType` and returns all loaders\n * except the `style-loader` which is expected to be the first loader.\n *\n * @param {object}  context\n * @param {object}  webpackConfig\n * @param {string}  fileType\n * @return {string[]}\n * @throws {Error}\n */\nfunction getNonStyleLoaders (loaderConfig, fileType) {\n  if (!loaderConfig.loaders || loaderConfig.loaders.length === 0) {\n    throw new Error(`No ${fileType} file loaders found.`)\n  }\n  if (!/^style(-loader)?$/.test(loaderConfig.loaders[0])) {\n    throw new Error(`Expected \"style-loader\" to be first loader of .css files. Instead got: ${loaderConfig.loaders[0]}`)\n  }\n\n  // `loaderConfig.loaders` without the leading 'style-loader'\n  const nonStyleLoaders = [].concat(loaderConfig.loaders)\n  nonStyleLoaders.shift()\n\n  return nonStyleLoaders\n}\n"]}