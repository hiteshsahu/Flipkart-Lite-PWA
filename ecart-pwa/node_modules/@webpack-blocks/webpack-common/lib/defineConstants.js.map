{"version":3,"sources":["../src/defineConstants.js"],"names":["defineConstants","constants","Object","assign","context","post","addDefinePlugin","stringify","value","JSON","stringifiedConstants","mapProps","plugins","webpack","DefinePlugin","object","valueMapper","keys","map","propKey","reduce","newObject","partial"],"mappings":";;;;;kBAAeA,e;;AAEf;;;;;;;;;;;;AAWA,SAASA,eAAT,CAA0BC,SAA1B,EAAqC;AACnC,SAAOC,OAAOC,MAAP,CAAeC,OAAD,IAAa;AAChCA,YAAQJ,eAAR,GAA0BE,OAAOC,MAAP,CAAc,EAAd,EAAkBC,QAAQJ,eAA1B,EAA2CC,SAA3C,CAA1B;AACA,WAAO,EAAP,CAFgC,CAEhB;AACjB,GAHM,EAGJ,EAAEI,MAAMC,eAAR,EAHI,CAAP;AAID;;AAED,SAASA,eAAT,CAA0BF,OAA1B,EAAmC;AACjC,QAAMG,YAAaC,KAAD,IAAWC,KAAKF,SAAL,CAAeC,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAA7B;AACA,QAAME,uBAAuBC,SAASP,QAAQJ,eAAjB,EAAkCO,SAAlC,CAA7B;;AAEA,SAAO;AACLK,aAAS,CACP,IAAIR,QAAQS,OAAR,CAAgBC,YAApB,CAAiCJ,oBAAjC,CADO;AADJ,GAAP;AAKD;;AAED,SAASC,QAAT,CAAmBI,MAAnB,EAA2BC,WAA3B,EAAwC;AACtC,SAAOd,OAAOe,IAAP,CAAYF,MAAZ,EACJG,GADI,CACCC,OAAD,KAAc,EAAE,CAACA,OAAD,GAAWH,YAAYD,OAAOI,OAAP,CAAZ,CAAb,EAAd,CADA,EAEJC,MAFI,CAEG,CAACC,SAAD,EAAYC,OAAZ,KAAwBpB,OAAOC,MAAP,CAAckB,SAAd,EAAyBC,OAAzB,CAF3B,EAE8D,EAF9D,CAAP;AAGD","file":"defineConstants.js","sourcesContent":["export default defineConstants\n\n/**\n * Replaces constants in your source code with a value (`process.env.NODE_ENV`\n * for example) using the `webpack.DefinePlugin`. Every constant's value is\n * `JSON.stringify()`-ed first, so you don't have to remember.\n *\n * Special feature: Using `defineConstants` multiple times results in a single\n * DefinePlugin instance configured to do all the replacements.\n *\n * @param {object} constants  { [constantName: string]: * }\n * @return {Function}\n */\nfunction defineConstants (constants) {\n  return Object.assign((context) => {\n    context.defineConstants = Object.assign({}, context.defineConstants, constants)\n    return {}       // return empty webpack config snippet\n  }, { post: addDefinePlugin })\n}\n\nfunction addDefinePlugin (context) {\n  const stringify = (value) => JSON.stringify(value, null, 2)\n  const stringifiedConstants = mapProps(context.defineConstants, stringify)\n\n  return {\n    plugins: [\n      new context.webpack.DefinePlugin(stringifiedConstants)\n    ]\n  }\n}\n\nfunction mapProps (object, valueMapper) {\n  return Object.keys(object)\n    .map((propKey) => ({ [propKey]: valueMapper(object[propKey]) }))\n    .reduce((newObject, partial) => Object.assign(newObject, partial), {})\n}\n"]}