'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = parseVersion;
/**
 * Parse semver-compliant version string.
 *
 * @param {string} versionString
 * @return {object}   { major: number, minor: number, patch: number, prerelease: string, raw: string }
 */
function parseVersion(versionString) {
  var _versionString$split = versionString.split('-'),
      _versionString$split2 = _slicedToArray(_versionString$split, 2);

  const release = _versionString$split2[0];
  var _versionString$split3 = _versionString$split2[1];
  const prerelease = _versionString$split3 === undefined ? '' : _versionString$split3;

  var _release$split$map = release.split('.').map(number => parseInt(number, 10)),
      _release$split$map2 = _slicedToArray(_release$split$map, 3);

  const major = _release$split$map2[0],
        minor = _release$split$map2[1],
        patch = _release$split$map2[2];


  return {
    major: major,
    minor: minor,
    patch: patch,
    prerelease: prerelease,
    raw: versionString
  };
}
//# sourceMappingURL=parseVersion.js.map