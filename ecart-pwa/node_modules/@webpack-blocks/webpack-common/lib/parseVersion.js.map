{"version":3,"sources":["../src/parseVersion.js"],"names":["parseVersion","versionString","split","release","prerelease","map","number","parseInt","major","minor","patch","raw"],"mappings":";;;;;;;;kBAMwBA,Y;AANxB;;;;;;AAMe,SAASA,YAAT,CAAuBC,aAAvB,EAAsC;AAAA,6BACdA,cAAcC,KAAd,CAAoB,GAApB,CADc;AAAA;;AAAA,QAC3CC,OAD2C;AAAA;AAAA,QAClCC,UADkC,yCACrB,EADqB;;AAAA,2BAEnBD,QAC7BD,KAD6B,CACvB,GADuB,EAE7BG,GAF6B,CAExBC,MAAD,IAAYC,SAASD,MAAT,EAAiB,EAAjB,CAFa,CAFmB;AAAA;;AAAA,QAE3CE,KAF2C;AAAA,QAEpCC,KAFoC;AAAA,QAE7BC,KAF6B;;;AAMnD,SAAO;AACLF,gBADK;AAELC,gBAFK;AAGLC,gBAHK;AAILN,0BAJK;AAKLO,SAAKV;AALA,GAAP;AAOD","file":"parseVersion.js","sourcesContent":["/**\n * Parse semver-compliant version string.\n *\n * @param {string} versionString\n * @return {object}   { major: number, minor: number, patch: number, prerelease: string, raw: string }\n */\nexport default function parseVersion (versionString) {\n  const [ release, prerelease = '' ] = versionString.split('-')\n  const [ major, minor, patch ] = release\n    .split('.')\n    .map((number) => parseInt(number, 10))\n\n  return {\n    major,\n    minor,\n    patch,\n    prerelease,\n    raw: versionString\n  }\n}\n"]}