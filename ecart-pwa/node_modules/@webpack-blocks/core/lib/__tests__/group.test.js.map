{"version":3,"sources":["../../src/__tests__/group.test.js"],"names":["t","block1","createTestBlock1","block2","createTestBlock2","block3","createTestBlock3","grouped","is","resultingConfig","deepEqual","distinct1","distinct2","distinct3","shared","callCount","pre","post","setter","undefined","post1","postShared","Object","assign","spy","post3"],"mappings":"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","file":"group.test.js","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport { group } from '../index'\n\ntest('group() merges the blocks', (t) => {\n  const block1 = createTestBlock1()\n  const block2 = createTestBlock2()\n  const block3 = createTestBlock3()\n\n  const grouped = group([ block1, block2, block3 ])\n  t.is(typeof grouped, 'function')\n\n  const resultingConfig = grouped({}, {})\n  t.deepEqual(resultingConfig, {\n    distinct1: 'distinct1',\n    distinct2: 'distinct2',\n    distinct3: 'distinct3',\n    shared: 'shared3'\n  })\n\n  t.is(block1.callCount, 1)\n  t.is(block2.callCount, 1)\n  t.is(block3.callCount, 1)\n})\n\ntest('group() merges pre hooks', (t) => {\n  const block1 = createTestBlock1()\n  const block2 = createTestBlock2()\n  const block3 = createTestBlock3()\n\n  const grouped = group([ block1, block2, block3 ])\n\n  // there are no hooks set on block2 and block3's hook is an array\n  t.deepEqual(grouped.pre, [ block1.pre, block3.pre[0] ])\n  t.is(block1.pre.callCount, 0)\n  t.is(block3.pre[0].callCount, 0)\n})\n\ntest('group() merges post hooks', (t) => {\n  const block1 = createTestBlock1()\n  const block2 = createTestBlock2()\n  const block3 = createTestBlock3()\n\n  const grouped = group([ block1, block2, block3 ])\n\n  // there are no hooks set on block2 and block3's hook is an array\n  t.deepEqual(grouped.post, [ block1.post, block3.post[0] ])\n  t.is(block1.post.callCount, 0)\n  t.is(block3.post[0].callCount, 0)\n})\n\n// Single-function pre & post hook\nfunction createTestBlock1 () {\n  const setter = () => ({\n    distinct1: 'distinct1',\n    shared: 'shared1'\n  })\n\n  const pre = () => undefined\n  const post = () => ({\n    post1: 'post1',\n    postShared: 'shared1'\n  })\n\n  return Object.assign(sinon.spy(setter), {\n    pre: sinon.spy(pre),\n    post: sinon.spy(post)\n  })\n}\n\n// No hooks\nfunction createTestBlock2 () {\n  const setter = () => ({\n    distinct2: 'distinct2',\n    shared: 'shared2'\n  })\n\n  return sinon.spy(setter)\n}\n\n// Array-of-functions pre & post hook\nfunction createTestBlock3 () {\n  const setter = () => ({\n    distinct3: 'distinct3',\n    shared: 'shared3'\n  })\n\n  const pre = () => undefined\n  const post = () => ({\n    post3: 'post3',\n    postShared: 'shared3'\n  })\n\n  return Object.assign(sinon.spy(setter), {\n    pre: [ sinon.spy(pre) ],\n    post: [ sinon.spy(post) ]\n  })\n}\n"]}