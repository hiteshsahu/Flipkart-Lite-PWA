'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _index = require('../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('group() merges the blocks', function (t) {
  var block1 = createTestBlock1();
  var block2 = createTestBlock2();
  var block3 = createTestBlock3();

  var grouped = (0, _index.group)([block1, block2, block3]);
  t.is(typeof grouped === 'undefined' ? 'undefined' : _typeof(grouped), 'function');

  var resultingConfig = grouped({}, {});
  t.deepEqual(resultingConfig, {
    distinct1: 'distinct1',
    distinct2: 'distinct2',
    distinct3: 'distinct3',
    shared: 'shared3'
  });

  t.is(block1.callCount, 1);
  t.is(block2.callCount, 1);
  t.is(block3.callCount, 1);
});

(0, _ava2.default)('group() merges pre hooks', function (t) {
  var block1 = createTestBlock1();
  var block2 = createTestBlock2();
  var block3 = createTestBlock3();

  var grouped = (0, _index.group)([block1, block2, block3]);

  // there are no hooks set on block2 and block3's hook is an array
  t.deepEqual(grouped.pre, [block1.pre, block3.pre[0]]);
  t.is(block1.pre.callCount, 0);
  t.is(block3.pre[0].callCount, 0);
});

(0, _ava2.default)('group() merges post hooks', function (t) {
  var block1 = createTestBlock1();
  var block2 = createTestBlock2();
  var block3 = createTestBlock3();

  var grouped = (0, _index.group)([block1, block2, block3]);

  // there are no hooks set on block2 and block3's hook is an array
  t.deepEqual(grouped.post, [block1.post, block3.post[0]]);
  t.is(block1.post.callCount, 0);
  t.is(block3.post[0].callCount, 0);
});

// Single-function pre & post hook
function createTestBlock1() {
  var setter = function setter() {
    return {
      distinct1: 'distinct1',
      shared: 'shared1'
    };
  };

  var pre = function pre() {
    return undefined;
  };
  var post = function post() {
    return {
      post1: 'post1',
      postShared: 'shared1'
    };
  };

  return Object.assign(_sinon2.default.spy(setter), {
    pre: _sinon2.default.spy(pre),
    post: _sinon2.default.spy(post)
  });
}

// No hooks
function createTestBlock2() {
  var setter = function setter() {
    return {
      distinct2: 'distinct2',
      shared: 'shared2'
    };
  };

  return _sinon2.default.spy(setter);
}

// Array-of-functions pre & post hook
function createTestBlock3() {
  var setter = function setter() {
    return {
      distinct3: 'distinct3',
      shared: 'shared3'
    };
  };

  var pre = function pre() {
    return undefined;
  };
  var post = function post() {
    return {
      post3: 'post3',
      postShared: 'shared3'
    };
  };

  return Object.assign(_sinon2.default.spy(setter), {
    pre: [_sinon2.default.spy(pre)],
    post: [_sinon2.default.spy(post)]
  });
}
//# sourceMappingURL=group.test.js.map