'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _index = require('../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.env.NODE_ENV = 'testing';

(0, _ava2.default)('env() merges correctly', function (t) {
  var envBlock = (0, _index.env)(process.env.NODE_ENV, [entryPoint1(), entryPoint2()]);

  t.deepEqual(envBlock(null, {}), {
    entry: {
      foo: './src/foo',
      bar: './src/bar'
    }
  });
});

(0, _ava2.default)('env() respects the NODE_ENV', function (t) {
  var envBlock = (0, _index.env)('foo-bar', [entryPoint1(), entryPoint2()]);

  t.deepEqual(envBlock(null, {}), {});
});

(0, _ava2.default)('env() block passes complete config to child blocks', function (t) {
  var spyBlock1 = _sinon2.default.spy(function () {
    return { entry: { foo: 'foo' } };
  });
  var spyBlock2 = _sinon2.default.spy(function () {
    return {};
  });

  var envBlock = (0, _index.env)(process.env.NODE_ENV, [spyBlock1, spyBlock2]);

  envBlock(null, {
    entry: { baz: 'baz' }
  });

  t.is(spyBlock1.callCount, 1);
  t.deepEqual(spyBlock1.lastCall.args, [null, { entry: { baz: 'baz' } }]);

  t.is(spyBlock2.callCount, 1);
  t.deepEqual(spyBlock2.lastCall.args, [null, { entry: { baz: 'baz', foo: 'foo' } }]);
});

(0, _ava2.default)('env() block merges only child blocks, not parent config', function (t) {
  var envBlock = (0, _index.env)(process.env.NODE_ENV, [entryPoint1(), entryPoint2()]);

  var prevConfig = {
    entry: { baz: 'baz' }
  };

  t.deepEqual(envBlock(null, prevConfig), {
    entry: {
      foo: './src/foo',
      bar: './src/bar'
    }
  });
});

function entryPoint1() {
  return function () {
    return {
      entry: {
        foo: './src/foo'
      }
    };
  };
}

function entryPoint2() {
  return function () {
    return {
      entry: {
        bar: './src/bar'
      }
    };
  };
}
//# sourceMappingURL=env.test.js.map