{"version":3,"sources":["../../src/__tests__/env.test.js"],"names":["process","env","NODE_ENV","t","envBlock","entryPoint1","entryPoint2","deepEqual","entry","foo","bar","spyBlock1","spy","spyBlock2","baz","is","callCount","lastCall","args","prevConfig"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEAA,QAAQC,GAAR,CAAYC,QAAZ,GAAuB,SAAvB;;AAEA,mBAAK,wBAAL,EAA+B,UAACC,CAAD,EAAO;AACpC,MAAMC,WAAW,gBAAIJ,QAAQC,GAAR,CAAYC,QAAhB,EAA0B,CACzCG,aADyC,EAEzCC,aAFyC,CAA1B,CAAjB;;AAKAH,IAAEI,SAAF,CAAYH,SAAS,IAAT,EAAe,EAAf,CAAZ,EAAgC;AAC9BI,WAAO;AACLC,WAAK,WADA;AAELC,WAAK;AAFA;AADuB,GAAhC;AAMD,CAZD;;AAcA,mBAAK,6BAAL,EAAoC,UAACP,CAAD,EAAO;AACzC,MAAMC,WAAW,gBAAI,SAAJ,EAAe,CAC9BC,aAD8B,EAE9BC,aAF8B,CAAf,CAAjB;;AAKAH,IAAEI,SAAF,CAAYH,SAAS,IAAT,EAAe,EAAf,CAAZ,EAAgC,EAAhC;AACD,CAPD;;AASA,mBAAK,oDAAL,EAA2D,UAACD,CAAD,EAAO;AAChE,MAAMQ,YAAY,gBAAMC,GAAN,CAAU;AAAA,WAAO,EAAEJ,OAAO,EAAEC,KAAK,KAAP,EAAT,EAAP;AAAA,GAAV,CAAlB;AACA,MAAMI,YAAY,gBAAMD,GAAN,CAAU;AAAA,WAAO,EAAP;AAAA,GAAV,CAAlB;;AAEA,MAAMR,WAAW,gBAAIJ,QAAQC,GAAR,CAAYC,QAAhB,EAA0B,CAAES,SAAF,EAAaE,SAAb,CAA1B,CAAjB;;AAEAT,WAAS,IAAT,EAAe;AACbI,WAAO,EAAEM,KAAK,KAAP;AADM,GAAf;;AAIAX,IAAEY,EAAF,CAAKJ,UAAUK,SAAf,EAA0B,CAA1B;AACAb,IAAEI,SAAF,CAAYI,UAAUM,QAAV,CAAmBC,IAA/B,EAAqC,CAAE,IAAF,EAAQ,EAAEV,OAAO,EAAEM,KAAK,KAAP,EAAT,EAAR,CAArC;;AAEAX,IAAEY,EAAF,CAAKF,UAAUG,SAAf,EAA0B,CAA1B;AACAb,IAAEI,SAAF,CAAYM,UAAUI,QAAV,CAAmBC,IAA/B,EAAqC,CAAE,IAAF,EAAQ,EAAEV,OAAO,EAAEM,KAAK,KAAP,EAAcL,KAAK,KAAnB,EAAT,EAAR,CAArC;AACD,CAfD;;AAiBA,mBAAK,yDAAL,EAAgE,UAACN,CAAD,EAAO;AACrE,MAAMC,WAAW,gBAAIJ,QAAQC,GAAR,CAAYC,QAAhB,EAA0B,CACzCG,aADyC,EAEzCC,aAFyC,CAA1B,CAAjB;;AAKA,MAAMa,aAAa;AACjBX,WAAO,EAAEM,KAAK,KAAP;AADU,GAAnB;;AAIAX,IAAEI,SAAF,CAAYH,SAAS,IAAT,EAAee,UAAf,CAAZ,EAAwC;AACtCX,WAAO;AACLC,WAAK,WADA;AAELC,WAAK;AAFA;AAD+B,GAAxC;AAMD,CAhBD;;AAkBA,SAASL,WAAT,GAAwB;AACtB,SAAO;AAAA,WAAO;AACZG,aAAO;AACLC,aAAK;AADA;AADK,KAAP;AAAA,GAAP;AAKD;;AAED,SAASH,WAAT,GAAwB;AACtB,SAAO;AAAA,WAAO;AACZE,aAAO;AACLE,aAAK;AADA;AADK,KAAP;AAAA,GAAP;AAKD","file":"env.test.js","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport { env } from '../index'\n\nprocess.env.NODE_ENV = 'testing'\n\ntest('env() merges correctly', (t) => {\n  const envBlock = env(process.env.NODE_ENV, [\n    entryPoint1(),\n    entryPoint2()\n  ])\n\n  t.deepEqual(envBlock(null, {}), {\n    entry: {\n      foo: './src/foo',\n      bar: './src/bar'\n    }\n  })\n})\n\ntest('env() respects the NODE_ENV', (t) => {\n  const envBlock = env('foo-bar', [\n    entryPoint1(),\n    entryPoint2()\n  ])\n\n  t.deepEqual(envBlock(null, {}), {})\n})\n\ntest('env() block passes complete config to child blocks', (t) => {\n  const spyBlock1 = sinon.spy(() => ({ entry: { foo: 'foo' } }))\n  const spyBlock2 = sinon.spy(() => ({}))\n\n  const envBlock = env(process.env.NODE_ENV, [ spyBlock1, spyBlock2 ])\n\n  envBlock(null, {\n    entry: { baz: 'baz' }\n  })\n\n  t.is(spyBlock1.callCount, 1)\n  t.deepEqual(spyBlock1.lastCall.args, [ null, { entry: { baz: 'baz' } } ])\n\n  t.is(spyBlock2.callCount, 1)\n  t.deepEqual(spyBlock2.lastCall.args, [ null, { entry: { baz: 'baz', foo: 'foo' } } ])\n})\n\ntest('env() block merges only child blocks, not parent config', (t) => {\n  const envBlock = env(process.env.NODE_ENV, [\n    entryPoint1(),\n    entryPoint2()\n  ])\n\n  const prevConfig = {\n    entry: { baz: 'baz' }\n  }\n\n  t.deepEqual(envBlock(null, prevConfig), {\n    entry: {\n      foo: './src/foo',\n      bar: './src/bar'\n    }\n  })\n})\n\nfunction entryPoint1 () {\n  return () => ({\n    entry: {\n      foo: './src/foo'\n    }\n  })\n}\n\nfunction entryPoint2 () {\n  return () => ({\n    entry: {\n      bar: './src/bar'\n    }\n  })\n}\n"]}