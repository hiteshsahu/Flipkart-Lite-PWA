'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _index = require('../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('createConfig() invokes blocks (config setters)', function (t) {
  var block1 = function block1() {
    return {
      distinct1: 'distinct1',
      shared: 'shared1'
    };
  };
  var block2 = function block2() {
    return {
      distinct2: 'distinct2',
      shared: 'shared2'
    };
  };
  var block3 = function block3() {
    return {
      distinct3: 'distinct3',
      shared: 'shared3'
    };
  };

  var resultingConfig = (0, _index.createConfig)({}, [block1, block2, block3]);

  t.deepEqual(resultingConfig, {
    distinct1: 'distinct1',
    distinct2: 'distinct2',
    distinct3: 'distinct3',
    shared: 'shared3'
  });
});

(0, _ava2.default)('createConfig() invokes pre hooks', function (t) {
  var block1 = Object.assign(function () {
    return {};
  }, {
    pre: _sinon2.default.spy(function () {})
  });
  var block2 = Object.assign(function () {
    return {};
  }, {
    pre: _sinon2.default.spy(function () {})
  });
  var block3 = Object.assign(function () {
    return {};
  }, {
    pre: _sinon2.default.spy(function () {})
  });

  (0, _index.createConfig)({}, [block1, block2, block3]);

  t.is(block1.pre.callCount, 1);
  t.is(block2.pre.callCount, 1);
  t.is(block3.pre.callCount, 1);

  t.is(block1.pre.lastCall.args.length, 1);
  var context = block1.pre.lastCall.args[0];
  t.is(typeof context === 'undefined' ? 'undefined' : _typeof(context), 'object');

  t.is(block2.pre.lastCall.args.length, 1);
  t.is(block2.pre.lastCall.args[0], context);

  t.is(block3.pre.lastCall.args.length, 1);
  t.is(block3.pre.lastCall.args[0], context);
});

(0, _ava2.default)('createConfig() invokes post hooks', function (t) {
  var block1 = Object.assign(function () {
    return {};
  }, {
    post: _sinon2.default.spy(function () {
      return {
        distinct1: 'distinct1',
        shared: 'shared1'
      };
    })
  });
  var block2 = Object.assign(function () {
    return {};
  }, {
    post: _sinon2.default.spy(function () {
      return {
        distinct2: 'distinct2',
        shared: 'shared2'
      };
    })
  });
  var block3 = Object.assign(function () {
    return {};
  }, {
    post: _sinon2.default.spy(function () {
      return {
        distinct3: 'distinct3',
        shared: 'shared3'
      };
    })
  });

  var resultingConfig = (0, _index.createConfig)({}, [block1, block2, block3]);
  t.deepEqual(resultingConfig, {
    distinct1: 'distinct1',
    distinct2: 'distinct2',
    distinct3: 'distinct3',
    shared: 'shared3'
  });

  t.is(block1.post.callCount, 1);
  t.is(block2.post.callCount, 1);
  t.is(block3.post.callCount, 1);

  t.is(block1.post.lastCall.args.length, 2);
  t.is(_typeof(block1.post.lastCall.args[0]), 'object');
  t.deepEqual(block1.post.lastCall.args[1], {});
  var context = block1.post.lastCall.args[0];

  t.deepEqual(block2.post.lastCall.args, [context, { distinct1: 'distinct1', shared: 'shared1' }]);

  t.deepEqual(block3.post.lastCall.args, [context, { distinct1: 'distinct1', distinct2: 'distinct2', shared: 'shared2' }]);
});

(0, _ava2.default)('createConfig() invokes hooks and setters in the right order', function (t) {
  var block1 = Object.assign(_sinon2.default.spy(function () {
    return {};
  }), {
    pre: _sinon2.default.spy(function () {}),
    post: _sinon2.default.spy(function () {
      return {};
    })
  });
  var block2 = Object.assign(_sinon2.default.spy(function () {
    return {};
  }), {
    pre: [_sinon2.default.spy(function () {}), _sinon2.default.spy(function () {})],
    post: [_sinon2.default.spy(function () {}), _sinon2.default.spy(function () {})]
  });
  var block3 = Object.assign(_sinon2.default.spy(function () {
    return {};
  }), {
    pre: _sinon2.default.spy(function () {}),
    post: _sinon2.default.spy(function () {
      return {};
    })
  });

  (0, _index.createConfig)({}, [block1, block2, block3]);

  t.true(block1.pre.called);
  t.true(block1.pre.calledBefore(block2.pre[0]));
  t.true(block2.pre[0].called);
  t.true(block2.pre[0].calledBefore(block2.pre[1]));
  t.true(block2.pre[1].called);
  t.true(block2.pre[1].calledBefore(block3.pre));
  t.true(block3.pre.called);
  t.true(block3.pre.calledBefore(block1));

  t.true(block1.called);
  t.true(block1.calledBefore(block2));
  t.true(block2.called);
  t.true(block2.calledBefore(block3));
  t.true(block3.called);
  t.true(block3.calledBefore(block1.post));

  t.true(block1.post.called);
  t.true(block1.post.calledBefore(block2.post[0]));
  t.true(block2.post[0].called);
  t.true(block2.post[0].calledBefore(block2.post[1]));
  t.true(block2.post[1].called);
  t.true(block2.post[1].calledBefore(block3.post));
  t.true(block3.post.called);
});

(0, _ava2.default)('createConfig() ignores duplicate hooks', function (t) {
  var block1 = Object.assign(_sinon2.default.spy(function () {
    return {};
  }), {
    pre: _sinon2.default.spy(function () {}),
    post: _sinon2.default.spy(function () {
      return {};
    })
  });
  var block2 = Object.assign(_sinon2.default.spy(function () {
    return {};
  }), {
    pre: [_sinon2.default.spy(function () {}), block1.pre],
    post: [_sinon2.default.spy(function () {}), block1.post]
  });
  var block3 = Object.assign(_sinon2.default.spy(function () {
    return {};
  }), {
    pre: block1.pre,
    post: block1.post
  });

  (0, _index.createConfig)({}, [block1, block2, block3]);

  t.is(block1.pre.callCount, 1);
  t.is(block1.post.callCount, 1);

  t.is(block2.pre[0].callCount, 1);
  t.is(block2.post[0].callCount, 1);

  // no need to test block3's pre/post hook spies or block2's 2nd hooks,
  // since they equal block1's
});
//# sourceMappingURL=createConfig.test.js.map