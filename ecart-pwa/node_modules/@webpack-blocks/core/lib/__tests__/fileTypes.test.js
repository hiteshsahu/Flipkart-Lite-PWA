'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _index = require('../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var webpack = {};

(0, _ava2.default)('fileType() works with existing type', function (t) {
  t.plan(1);

  (0, _index.createConfig)(webpack, [function (context) {
    var regex = context.fileType('application/javascript');
    t.is(String(regex), String(/\.(js|jsx)$/));
    return {};
  }]);
});

(0, _ava2.default)('fileType() throws on non-existing type', function (t) {
  t.plan(1);

  (0, _index.createConfig)(webpack, [function (context) {
    t.throws(function () {
      return context.fileType('application/not-existent');
    }, /Type is not registered/);
    return {};
  }]);
});

(0, _ava2.default)('fileType.get() works with existing type', function (t) {
  t.plan(1);

  (0, _index.createConfig)(webpack, [function (context) {
    var regex = context.fileType.get('application/javascript');
    t.is(String(regex), String(/\.(js|jsx)$/));
    return {};
  }]);
});

(0, _ava2.default)('fileType.get() throws on non-existing type', function (t) {
  t.plan(1);

  (0, _index.createConfig)(webpack, [function (context) {
    t.throws(function () {
      return context.fileType.get('application/not-existent');
    }, /Type is not registered/);
    return {};
  }]);
});

(0, _ava2.default)('fileType.has() works with existing types', function (t) {
  t.plan(1);

  (0, _index.createConfig)(webpack, [function (context) {
    t.true(context.fileType.has('application/javascript'));
    return {};
  }]);
});

(0, _ava2.default)('fileType.has() works with non-existing types', function (t) {
  t.plan(1);

  (0, _index.createConfig)(webpack, [function (context) {
    t.false(context.fileType.has('application/not-existent'));
    return {};
  }]);
});

(0, _ava2.default)('fileType.add() works', function (t) {
  t.plan(2);

  (0, _index.createConfig)(webpack, [function (context) {
    t.throws(function () {
      return context.fileType.get('application/new-thing');
    }, /Type is not registered/);
    context.fileType.add('application/new-thing', '*.new');
    return {};
  }, function (context) {
    t.is(context.fileType.get('application/new-thing'), '*.new');
    return {};
  }]);
});
//# sourceMappingURL=fileTypes.test.js.map