{"version":3,"sources":["../../src/__tests__/fileTypes.test.js"],"names":["webpack","t","plan","context","regex","fileType","is","String","throws","get","true","has","false","add"],"mappings":";;AAAA;;;;AACA;;;;AAEA,IAAMA,UAAU,EAAhB;;AAEA,mBAAK,qCAAL,EAA4C,UAACC,CAAD,EAAO;AACjDA,IAAEC,IAAF,CAAO,CAAP;;AAEA,2BAAaF,OAAb,EAAsB,CACpB,UAACG,OAAD,EAAa;AACX,QAAMC,QAAQD,QAAQE,QAAR,CAAiB,wBAAjB,CAAd;AACAJ,MAAEK,EAAF,CAAKC,OAAOH,KAAP,CAAL,EAAoBG,OAAO,aAAP,CAApB;AACA,WAAO,EAAP;AACD,GALmB,CAAtB;AAOD,CAVD;;AAYA,mBAAK,wCAAL,EAA+C,UAACN,CAAD,EAAO;AACpDA,IAAEC,IAAF,CAAO,CAAP;;AAEA,2BAAaF,OAAb,EAAsB,CACpB,UAACG,OAAD,EAAa;AACXF,MAAEO,MAAF,CAAS;AAAA,aAAML,QAAQE,QAAR,CAAiB,0BAAjB,CAAN;AAAA,KAAT,EAA6D,wBAA7D;AACA,WAAO,EAAP;AACD,GAJmB,CAAtB;AAMD,CATD;;AAWA,mBAAK,yCAAL,EAAgD,UAACJ,CAAD,EAAO;AACrDA,IAAEC,IAAF,CAAO,CAAP;;AAEA,2BAAaF,OAAb,EAAsB,CACpB,UAACG,OAAD,EAAa;AACX,QAAMC,QAAQD,QAAQE,QAAR,CAAiBI,GAAjB,CAAqB,wBAArB,CAAd;AACAR,MAAEK,EAAF,CAAKC,OAAOH,KAAP,CAAL,EAAoBG,OAAO,aAAP,CAApB;AACA,WAAO,EAAP;AACD,GALmB,CAAtB;AAOD,CAVD;;AAYA,mBAAK,4CAAL,EAAmD,UAACN,CAAD,EAAO;AACxDA,IAAEC,IAAF,CAAO,CAAP;;AAEA,2BAAaF,OAAb,EAAsB,CACpB,UAACG,OAAD,EAAa;AACXF,MAAEO,MAAF,CAAS;AAAA,aAAML,QAAQE,QAAR,CAAiBI,GAAjB,CAAqB,0BAArB,CAAN;AAAA,KAAT,EAAiE,wBAAjE;AACA,WAAO,EAAP;AACD,GAJmB,CAAtB;AAMD,CATD;;AAWA,mBAAK,0CAAL,EAAiD,UAACR,CAAD,EAAO;AACtDA,IAAEC,IAAF,CAAO,CAAP;;AAEA,2BAAaF,OAAb,EAAsB,CACpB,UAACG,OAAD,EAAa;AACXF,MAAES,IAAF,CAAOP,QAAQE,QAAR,CAAiBM,GAAjB,CAAqB,wBAArB,CAAP;AACA,WAAO,EAAP;AACD,GAJmB,CAAtB;AAMD,CATD;;AAWA,mBAAK,8CAAL,EAAqD,UAACV,CAAD,EAAO;AAC1DA,IAAEC,IAAF,CAAO,CAAP;;AAEA,2BAAaF,OAAb,EAAsB,CACpB,UAACG,OAAD,EAAa;AACXF,MAAEW,KAAF,CAAQT,QAAQE,QAAR,CAAiBM,GAAjB,CAAqB,0BAArB,CAAR;AACA,WAAO,EAAP;AACD,GAJmB,CAAtB;AAMD,CATD;;AAWA,mBAAK,sBAAL,EAA6B,UAACV,CAAD,EAAO;AAClCA,IAAEC,IAAF,CAAO,CAAP;;AAEA,2BAAaF,OAAb,EAAsB,CACpB,UAACG,OAAD,EAAa;AACXF,MAAEO,MAAF,CAAS;AAAA,aAAML,QAAQE,QAAR,CAAiBI,GAAjB,CAAqB,uBAArB,CAAN;AAAA,KAAT,EAA8D,wBAA9D;AACAN,YAAQE,QAAR,CAAiBQ,GAAjB,CAAqB,uBAArB,EAA8C,OAA9C;AACA,WAAO,EAAP;AACD,GALmB,EAMpB,UAACV,OAAD,EAAa;AACXF,MAAEK,EAAF,CAAKH,QAAQE,QAAR,CAAiBI,GAAjB,CAAqB,uBAArB,CAAL,EAAoD,OAApD;AACA,WAAO,EAAP;AACD,GATmB,CAAtB;AAWD,CAdD","file":"fileTypes.test.js","sourcesContent":["import test from 'ava'\nimport { createConfig } from '../index'\n\nconst webpack = {}\n\ntest('fileType() works with existing type', (t) => {\n  t.plan(1)\n\n  createConfig(webpack, [\n    (context) => {\n      const regex = context.fileType('application/javascript')\n      t.is(String(regex), String(/\\.(js|jsx)$/))\n      return {}\n    }\n  ])\n})\n\ntest('fileType() throws on non-existing type', (t) => {\n  t.plan(1)\n\n  createConfig(webpack, [\n    (context) => {\n      t.throws(() => context.fileType('application/not-existent'), /Type is not registered/)\n      return {}\n    }\n  ])\n})\n\ntest('fileType.get() works with existing type', (t) => {\n  t.plan(1)\n\n  createConfig(webpack, [\n    (context) => {\n      const regex = context.fileType.get('application/javascript')\n      t.is(String(regex), String(/\\.(js|jsx)$/))\n      return {}\n    }\n  ])\n})\n\ntest('fileType.get() throws on non-existing type', (t) => {\n  t.plan(1)\n\n  createConfig(webpack, [\n    (context) => {\n      t.throws(() => context.fileType.get('application/not-existent'), /Type is not registered/)\n      return {}\n    }\n  ])\n})\n\ntest('fileType.has() works with existing types', (t) => {\n  t.plan(1)\n\n  createConfig(webpack, [\n    (context) => {\n      t.true(context.fileType.has('application/javascript'))\n      return {}\n    }\n  ])\n})\n\ntest('fileType.has() works with non-existing types', (t) => {\n  t.plan(1)\n\n  createConfig(webpack, [\n    (context) => {\n      t.false(context.fileType.has('application/not-existent'))\n      return {}\n    }\n  ])\n})\n\ntest('fileType.add() works', (t) => {\n  t.plan(2)\n\n  createConfig(webpack, [\n    (context) => {\n      t.throws(() => context.fileType.get('application/new-thing'), /Type is not registered/)\n      context.fileType.add('application/new-thing', '*.new')\n      return {}\n    },\n    (context) => {\n      t.is(context.fileType.get('application/new-thing'), '*.new')\n      return {}\n    }\n  ])\n})\n"]}