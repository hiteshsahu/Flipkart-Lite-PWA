{"version":3,"sources":["../src/createFileTypesMapping.js"],"names":["module","exports","createFileTypesMapping","initialMapping","currentMapping","mapperMethods","all","get","type","Error","has","add","condition","addOne","addMultiple","mapper","FileTypeMapping","Object","assign","types"],"mappings":";;;;;;AAAAA,OAAOC,OAAP,GAAiBC,sBAAjB;;AAEA,SAASA,sBAAT,CAAiCC,cAAjC,EAAiD;AAC/C,MAAIC,iBAAiBD,cAArB;;AAEA,MAAME,gBAAgB;AACpBC,OADoB,iBACb;AACL,aAAOF,cAAP;AACD,KAHmB;;;AAKpB;;;;AAIAG,OAToB,eASfC,IATe,EAST;AACT,UAAI,EAAEA,QAAQJ,cAAV,CAAJ,EAA+B;AAC7B,cAAM,IAAIK,KAAJ,+CAAsDD,IAAtD,CAAN;AACD;AACD,aAAOJ,eAAgBI,IAAhB,CAAP;AACD,KAdmB;;;AAgBpB;;;;AAIAE,OApBoB,eAoBfF,IApBe,EAoBT;AACT,aAAOA,QAAQJ,cAAf;AACD,KAtBmB;;;AAwBpB;;;;;;;;AAQAO,OAhCoB,eAgCfH,IAhCe,EAgCTI,SAhCS,EAgCE;AACpB,UAAI,OAAOJ,IAAP,KAAgB,QAApB,EAA8B;AAC5BJ,yBAAiBS,OAAOL,IAAP,EAAaI,SAAb,CAAjB;AACD,OAFD,MAEO,IAAI,QAAOJ,IAAP,yCAAOA,IAAP,OAAgB,QAApB,EAA8B;AACnCJ,yBAAiBU,YAAYN,IAAZ,CAAjB;AACD,OAFM,MAEA;AACL,cAAM,IAAIC,KAAJ,qFAA2FD,IAA3F,yCAA2FA,IAA3F,GAAN;AACD;AACD,aAAOO,MAAP;AACD;AAzCmB,GAAtB;;AA4CA,WAASC,eAAT,CAA0BR,IAA1B,EAAgC;AAC9B,WAAOO,OAAOR,GAAP,CAAWC,IAAX,CAAP;AACD;;AAED,WAASK,MAAT,CAAiBL,IAAjB,EAAuBI,SAAvB,EAAkC;AAChC,QAAI,CAACA,SAAL,EAAgB;AACd,YAAM,IAAIH,KAAJ,oFAAN;AACD;AACD,WAAOQ,OAAOC,MAAP,CAAc,EAAd,EAAkBd,cAAlB,sBACHI,IADG,EACKI,SADL,EAAP;AAGD;;AAED,WAASE,WAAT,CAAsBK,KAAtB,EAA6B;AAC3B,WAAOF,OAAOC,MAAP,CAAc,EAAd,EAAkBd,cAAlB,EAAkCe,KAAlC,CAAP;AACD;;AAED,MAAMJ,SAASE,OAAOC,MAAP,CAAcF,eAAd,EAA+BX,aAA/B,CAAf;AACA,SAAOU,MAAP;AACD","file":"createFileTypesMapping.js","sourcesContent":["module.exports = createFileTypesMapping\n\nfunction createFileTypesMapping (initialMapping) {\n  let currentMapping = initialMapping\n\n  const mapperMethods = {\n    all () {\n      return currentMapping\n    },\n\n    /**\n     * @param {string} type   MIME type.\n     * @return {RegExp|Function|string|array}\n     */\n    get (type) {\n      if (!(type in currentMapping)) {\n        throw new Error(`FileTypes:get(): Type is not registered: ${type}`)\n      }\n      return currentMapping[ type ]\n    },\n\n    /**\n     * @param {string} type   MIME type.\n     * @return {boolean}\n     */\n    has (type) {\n      return type in currentMapping\n    },\n\n    /**\n     * @param {string|object} type\n     * @param {RegExp|Function|string|array} [condition]  Only used if param `type` is a string.\n     * @return {FileTypesMapping} this\n     * @see https://webpack.github.io/docs/configuration.html#module-loaders\n     * @example `fileType.add('application/javascript', /\\.jsx?$/)`\n     * @example `fileType.add({ 'application/javascript': [ /\\.js$/, /\\.jsx$/ ] })`\n     */\n    add (type, condition) {\n      if (typeof type === 'string') {\n        currentMapping = addOne(type, condition)\n      } else if (typeof type === 'object') {\n        currentMapping = addMultiple(type)\n      } else {\n        throw new Error(`FileTypes:add(): Expected 1st param to be a string or object, but got: ${typeof type}`)\n      }\n      return mapper\n    }\n  }\n\n  function FileTypeMapping (type) {\n    return mapper.get(type)\n  }\n\n  function addOne (type, condition) {\n    if (!condition) {\n      throw new Error(`FileTypes:add(): Expected a 'condition' as 2nd param if 1st param is a string.`)\n    }\n    return Object.assign({}, currentMapping, {\n      [ type ]: condition\n    })\n  }\n\n  function addMultiple (types) {\n    return Object.assign({}, currentMapping, types)\n  }\n\n  const mapper = Object.assign(FileTypeMapping, mapperMethods)\n  return mapper\n}\n"]}