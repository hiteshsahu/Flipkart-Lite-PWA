{"version":3,"sources":["../src/index.js"],"names":["merge","require","createFileTypesMapping","defaultFileTypes","exports","createConfig","group","env","isFunction","value","initialContext","configSetters","Error","Array","isArray","every","fileType","context","Object","assign","invokePreHooks","config","invokeConfigSetters","postProcessedConfig","invokePostHooks","envName","currentEnv","process","NODE_ENV","pre","getHooks","post","groupBlock","baseConfig","getCompleteConfig","incompleteConfig","smart","type","hooks","filter","Boolean","setter","map","flattenedHooks","hook","reduce","allHooks","someHooks","concat","filterDuplicates","mergedConfig","configPartial","preHooks","forEach","postHooks","array","item","index","indexOf"],"mappings":"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","file":"index.js","sourcesContent":["const merge = require('webpack-merge')\nconst createFileTypesMapping = require('./createFileTypesMapping')\nconst defaultFileTypes = require('./defaultFileTypes')\n\nexports.createConfig = createConfig\nexports.group = group\nexports.env = env\n\nconst isFunction = (value) => typeof value === 'function'\n\n/**\n * Takes an array of webpack blocks and creates a webpack config out of them.\n * Each webpack block is a callback function which will be invoked to return a\n * partial webpack config. These partial configs are merged to create the\n * final, complete webpack config that will be returned.\n *\n * @param {object}     initialContext                 The blueprint for the initial context object.\n * @param {object}     initialContext.webpack         Webpack instance\n * @param {object}     initialContext.webpackVersion  Webpack version (`{ major, minor, ... }`)\n * @param {Function[]} configSetters  Array of functions as returned by webpack blocks.\n * @return {object}                   Webpack config object.\n */\nfunction createConfig (initialContext, configSetters) {\n  if (!initialContext) {\n    throw new Error(`No initial context passed.`)\n  }\n  if (!Array.isArray(configSetters) || !configSetters.every(isFunction)) {\n    throw new Error(`Expected parameter 'configSetters' to be an array of functions.`)\n  }\n\n  const fileType = createFileTypesMapping(defaultFileTypes)\n  const context = Object.assign({ fileType }, initialContext)\n\n  invokePreHooks(configSetters, context)\n  const config = invokeConfigSetters(configSetters, context)\n  const postProcessedConfig = invokePostHooks(configSetters, context, config)\n\n  return postProcessedConfig\n}\n\n/**\n * Applies an array of webpack blocks only if `process.env.NODE_ENV` matches the\n * given `envName`. If no `NODE_ENV` is set, it will be treated as 'development'.\n *\n * @param {string} envName            Environment name like 'development', 'production' or 'testing'.\n * @param {Function[]} configSetters  Array of functions as returned by webpack blocks.\n * @return {Function}\n */\nfunction env (envName, configSetters) {\n  const currentEnv = process.env.NODE_ENV || 'development'\n\n  if (currentEnv !== envName) {\n    return () => ({})\n  } else {\n    return group(configSetters)\n  }\n}\n\n/**\n * Combines an array of blocks to a new joined block. Running this single block\n * has the same effect as running all source blocks.\n *\n * @param {Function[]} configSetters  Array of functions as returned by webpack blocks.\n * @return {Function}\n */\nfunction group (configSetters) {\n  const pre = getHooks(configSetters, 'pre')\n  const post = getHooks(configSetters, 'post')\n\n  const groupBlock = (context, config) => {\n    // `baseConfig` must be {}, so `invokeConfigSetters()` returns a config\n    // diff, not the whole merged config\n    const baseConfig = {}\n    // `getCompleteConfig` will make sure the whole config is passed as 2nd param when\n    // the config setters are invoked, even though the baseConfig is `{}`, not `config`\n    const getCompleteConfig = (incompleteConfig) => merge.smart(config, incompleteConfig)\n    return invokeConfigSetters(configSetters, context, baseConfig, getCompleteConfig)\n  }\n\n  return Object.assign(groupBlock, { pre, post })\n}\n\nfunction getHooks (configSetters, type) {\n  // Get all the blocks' pre/post hooks\n  const hooks = configSetters\n    .filter(setter => Boolean(setter[type]))\n    .map(setter => setter[type])\n\n  // Flatten the array (since each item might be an array as well)\n  const flattenedHooks = hooks\n    .map((hook) => Array.isArray(hook) ? hook : [ hook ])\n    .reduce((allHooks, someHooks) => allHooks.concat(someHooks), [])\n\n  return filterDuplicates(flattenedHooks)\n}\n\nfunction invokeConfigSetters (configSetters, context, baseConfig = {}, getCompleteConfig = (config) => config) {\n  return configSetters.reduce(\n    (mergedConfig, setter) => {\n      const configPartial = setter(context, getCompleteConfig(mergedConfig))\n      return merge.smart(mergedConfig, configPartial)\n    },\n    baseConfig\n  )\n}\n\nfunction invokePreHooks (configSetters, context) {\n  const preHooks = getHooks(configSetters, 'pre')\n  preHooks.forEach((hook) => hook(context))\n}\n\nfunction invokePostHooks (configSetters, context, config) {\n  const postHooks = getHooks(configSetters, 'post')\n  return invokeConfigSetters(postHooks, context, config)\n}\n\nfunction filterDuplicates (array) {\n  return array.filter((item, index) => array.indexOf(item) === index)\n}\n"]}