{
  "_args": [
    [
      {
        "raw": "@webpack-blocks/webpack2@^0.4.0",
        "scope": "@webpack-blocks",
        "escapedName": "@webpack-blocks%2fwebpack2",
        "name": "@webpack-blocks/webpack2",
        "rawSpec": "^0.4.0",
        "spec": ">=0.4.0 <0.5.0",
        "type": "range"
      },
      "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli"
    ]
  ],
  "_from": "@webpack-blocks/webpack2@>=0.4.0 <0.5.0",
  "_id": "@webpack-blocks/webpack2@0.4.0",
  "_inCache": true,
  "_location": "/@webpack-blocks/webpack2",
  "_nodeVersion": "6.6.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/webpack2-0.4.0.tgz_1485526125778_0.5697650939691812"
  },
  "_npmUser": {
    "name": "webpack-blocks",
    "email": "andy@dev.next-step-software.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {
    "big.js": "3.1.3",
    "emojis-list": "2.1.0",
    "json5": "0.5.1",
    "object-assign": "4.1.1"
  },
  "_requested": {
    "raw": "@webpack-blocks/webpack2@^0.4.0",
    "scope": "@webpack-blocks",
    "escapedName": "@webpack-blocks%2fwebpack2",
    "name": "@webpack-blocks/webpack2",
    "rawSpec": "^0.4.0",
    "spec": ">=0.4.0 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/preact-cli"
  ],
  "_resolved": "https://registry.npmjs.org/@webpack-blocks/webpack2/-/webpack2-0.4.0.tgz",
  "_shasum": "bf257676acfe857cabace0b22fc8ee5410c58332",
  "_shrinkwrap": null,
  "_spec": "@webpack-blocks/webpack2@^0.4.0",
  "_where": "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli",
  "author": {
    "name": "Andy Wermke",
    "email": "andy@dev.next-step-software.com"
  },
  "bugs": {
    "url": "https://github.com/andywer/webpack-blocks/issues"
  },
  "dependencies": {
    "@webpack-blocks/core": "^0.4.0",
    "@webpack-blocks/webpack-common": "^0.4.0",
    "css-loader": "^0.25.0",
    "file-loader": "^0.9.0",
    "style-loader": "^0.13.1",
    "url-loader": "^0.5.7",
    "webpack": "^2.2.0"
  },
  "description": "Webpack block for the webpack 2.x base configuration.",
  "devDependencies": {
    "@webpack-blocks/babel6": "^0.4.0",
    "@webpack-blocks/css-modules": "^0.4.0",
    "@webpack-blocks/dev-server2": "^0.4.0",
    "@webpack-blocks/extract-text2": "^0.4.0",
    "@webpack-blocks/postcss": "^0.4.0",
    "@webpack-blocks/sass": "^0.4.0",
    "@webpack-blocks/tslint": "^0.4.0",
    "@webpack-blocks/typescript": "^0.4.0",
    "ava": "^0.16.0",
    "awesome-typescript-loader": "^3.0.0-beta.18",
    "babel-loader": "^6.2.9",
    "css-loader": "^0.25.0",
    "extract-text-webpack-plugin": "^2.0.0-rc.0",
    "jsdom": "^9.9.1",
    "mz": "^2.6.0",
    "node-sass": "^3.4.2",
    "postcss-loader": "^1.2.0",
    "precss": "^1.4.0",
    "sass-loader": "^4.0.2",
    "standard": "^8.1.0",
    "style-loader": "^0.13.1",
    "tslint": "^4.3.1",
    "tslint-loader": "^3.3.0",
    "typescript": "^2.1.5"
  },
  "directories": {},
  "dist": {
    "shasum": "bf257676acfe857cabace0b22fc8ee5410c58332",
    "tarball": "https://registry.npmjs.org/@webpack-blocks/webpack2/-/webpack2-0.4.0.tgz"
  },
  "engines": {
    "node": ">= 4.0"
  },
  "homepage": "https://github.com/andywer/webpack-blocks#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "webpack-blocks",
      "email": "andy@dev.next-step-software.com"
    }
  ],
  "name": "@webpack-blocks/webpack2",
  "optionalDependencies": {},
  "readme": "# Webpack blocks - Webpack 2 base configuration\n\n[![JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n[![NPM Version](https://img.shields.io/npm/v/@webpack-blocks/webpack2.svg)](https://www.npmjs.com/package/@webpack-blocks/webpack2)\n\nThis is the `webpack2` block providing webpack 2 core functionality. Also provides all `@webpack-blocks/core` exports for convenience.\n\n\n## Usage\n\n```js\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst { addPlugins, createConfig, entryPoint, env, setOutput, sourceMaps, webpack } = require('@webpack-blocks/webpack2')\n\nmodule.exports = createConfig([\n  entryPoint('./src/main.js'),\n  setOutput('./build/bundle.js'),\n  addPlugins([\n    new HtmlWebpackPlugin({\n      inject: true,\n      template: './index.html'\n    }),\n    new webpack.DefinePlugin({\n      'process.env': JSON.stringify(process.env || 'development')\n    })\n  ]),\n  env('development', [\n    // will only enable source maps if `NODE_ENV === 'development'`\n    sourceMaps()\n  ])\n])\n```\n\n\n## Webpack 2 compatible blocks\n\nThere are some webpack loaders and plugins that are only compatible with webpack 2 in a certain version.\nMake sure you use the appropriate webpack blocks:\n\n* [dev-server2](https://www.npmjs.com/package/@webpack-blocks/dev-server2)\n* [extract-text2](https://www.npmjs.com/package/@webpack-blocks/extract-text2)\n\n\n## Exports\n\n#### createConfig(configSetter: Function[]): object\n\nTakes an array of config setters (the functions returned by invoked webpack blocks), invokes them and returns the resulting webpack config object. Already sets some generic default config, like default CSS, font and image file loaders.\n\n#### createConfig.vanilla(configSetter: Function[]): object\n\nWorks just like `createConfig()`, but provides no default configuration whatsoever. Use it only if you want to get rid of the default loaders for some reason.\n\n#### group(configSetters: Function[]): Function\n\nCombines an array of blocks to a new joined block. Running this single block has the same effect as running all source blocks.\n\n#### env(envName: string, configSetters: Function[]): Function\n\nApplies an array of webpack blocks only if `process.env.NODE_ENV` matches the given `envName`. If no `NODE_ENV` is set, it will be treated as 'development'.\n\n#### defineConstants(constants: object): Function\n\nReplaces constants in your source code with a value (`process.env.NODE_ENV` for example) using the [webpack.DefinePlugin](https://webpack.github.io/docs/list-of-plugins.html#defineplugin). Pass an object containing your constant definitions: `{ [constantName: string]: <constantValue: any> }`.\n\nEvery constant's value is `JSON.stringify()`-ed first, so you don't have to remember.\n\nSpecial feature: Using `defineConstants` multiple times results in a single DefinePlugin instance configured to do all the replacements.\n\n#### webpack: object\n\nSame as `require('webpack')`.\n\n---\n\n#### addPlugins(plugins: WebpackPlugin[])\n\nAdd custom [plugins](https://webpack.github.io/docs/configuration.html#plugins) to the webpack configuration.\n\nExample usage: `addPlugins([ new HtmlWebpackPlugin() ])`\n\n#### customConfig(webpackConfigSnippet: object)\n\nAdd some custom configuration to the webpack configuration. The object you pass will be merged into the webpack configuration object.\n\n#### entryPoint(entryPoint: string|string[]|object)\n\nAdds one or multiple entry points. If the parameter is not an object the entry point(s) will be added to the default chunk named `main`. This way we make sure that the resulting [https://webpack.github.io/docs/configuration.html#entry](entry) configuration property will always be an object.\n\n#### performance(perfBudgetOptions: object)\n\nSet a performance budget. Performance budgets are custom limits (like max bundle size) you can set to make webpack warn you or throw an error if the application exceeds those limits.\n\nOptions object:\n```js\n{\n  maxAssetSize: number,         // File size limit in bytes\n  maxEntrypointSize: number,    // Total size (of an entry point) limit in bytes\n  hints: string                 // \"warning\" or \"error\"\n}\n```\n\n#### resolveAliases(aliases: object)\n\nSets [resolve.alias](https://webpack.github.io/docs/configuration.html#resolve-alias). Use it to manually override module resolving.\n\nExample usage: `resolveAliases({ foo: path.resolve('./bar.js') })` will make `require('foo')` resolve to `bar.js`.\n\n#### setContext(path: string)\n\nSets the webpack [context](https://webpack.github.io/docs/configuration.html#context). Not to be confused with the webpack-block's `context` object.\n\n#### setDevTool(devtool: string)\n\nUse it to manually set the webpack [devtool](https://webpack.github.io/docs/configuration.html#devtool) property, like `'eval'`, `'source-map'` and such.\n\n#### setOutput(output: string|object)\n\nSets the webpack [output](https://webpack.github.io/docs/configuration.html#output) property. Use it to tell webpack where to save the output bundle(s).\n\nYou can either pass an object that complies to the format described in the [webpack docs](https://webpack.github.io/docs/configuration.html#output) or just pass the destination file path.\n\nInstead of passing the destination file path you can also\n* Just pass a filename (not the complete path): The directory will default to `./build/`.\n* Just pass the path to a directory (trailing `/`): The filename will default to `bundle.js`.\n\n#### sourceMaps(devtool: ?string)\n\nJust a convenience wrapper to enable sourcemaps in an easier-to-read fashion than `setDevTool()`. Will set webpack's `devtool` to `'cheap-module-source-map'` if no explicit `devtool` is passed as parameter.\n\n\n## Webpack blocks\n\nCheck out the\n\nðŸ‘‰ [Main Documentation](https://github.com/andywer/webpack-blocks)\n\nReleased under the terms of the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/andywer/webpack-blocks.git"
  },
  "scripts": {
    "prepublish": "npm test",
    "test": "standard && ava"
  },
  "version": "0.4.0"
}
