{
  "_args": [
    [
      {
        "raw": "postcss-less@^0.16.1",
        "scope": null,
        "escapedName": "postcss-less",
        "name": "postcss-less",
        "rawSpec": "^0.16.1",
        "spec": ">=0.16.1 <0.17.0",
        "type": "range"
      },
      "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli"
    ]
  ],
  "_from": "postcss-less@>=0.16.1 <0.17.0",
  "_id": "postcss-less@0.16.1",
  "_inCache": true,
  "_location": "/postcss-less",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/postcss-less-0.16.1.tgz_1494089447524_0.18320571212098002"
  },
  "_npmUser": {
    "name": "shellscape",
    "email": "andrew@shellscape.org"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "postcss-less@^0.16.1",
    "scope": null,
    "escapedName": "postcss-less",
    "name": "postcss-less",
    "rawSpec": "^0.16.1",
    "spec": ">=0.16.1 <0.17.0",
    "type": "range"
  },
  "_requiredBy": [
    "/preact-cli"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-less/-/postcss-less-0.16.1.tgz",
  "_shasum": "df179ed24365a60f6658e139816dbac78aee5043",
  "_shrinkwrap": null,
  "_spec": "postcss-less@^0.16.1",
  "_where": "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli",
  "author": {
    "name": "Denys Kniazevych",
    "email": "webschik@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/webschik/postcss-less/issues"
  },
  "contributors": [
    {
      "name": "Andrew Powell",
      "email": "andrew@shellscape.org"
    },
    {
      "name": "Pat Sissons",
      "email": "patricksissons@gmail.com"
    },
    {
      "name": "Jeff Lindsey jeffalindsey@gmail.com"
    },
    {
      "name": "Denys Kniazevych webschik@gmail.com"
    },
    {
      "name": "Andrey Sitnik andrey@sitnik.ru"
    }
  ],
  "dependencies": {
    "postcss": "^5.2.16"
  },
  "description": "LESS parser for PostCSS",
  "devDependencies": {
    "babel-core": "^6.7.2",
    "babel-eslint": "^6.0.0",
    "babel-plugin-add-module-exports": "^0.1.2",
    "babel-preset-es2015": "^6.6.0",
    "babel-register": "^6.7.2",
    "chai": "^3.5.0",
    "eslint-config-strict": "^8.5.0",
    "eslint-plugin-filenames": "^0.2.0",
    "gulp": "^3.9.1",
    "gulp-babel": "^6.1.2",
    "gulp-eslint": "^2.0.0",
    "gulp-json-editor": "2.2.1",
    "gulp-mocha": "^2.2.0",
    "gulp-rename": "^1.2.2",
    "gulp-rimraf": "^0.2.0",
    "gulp-uglify": "^1.5.3",
    "gulp-util": "^3.0.7",
    "less": "^2.6.1",
    "mocha": "^2.4.5",
    "postcss-parser-tests": "^5.0.6",
    "run-sequence": "^1.1.5",
    "through": "^2.3.8"
  },
  "directories": {},
  "dist": {
    "shasum": "df179ed24365a60f6658e139816dbac78aee5043",
    "tarball": "https://registry.npmjs.org/postcss-less/-/postcss-less-0.16.1.tgz"
  },
  "files": [
    "dist"
  ],
  "gitHead": "eda99387fc651dd331801df9999ef2a83e9d60ca",
  "homepage": "https://github.com/webschik/postcss-less#readme",
  "keywords": [
    "css",
    "postcss",
    "postcss-syntax",
    "parser",
    "less"
  ],
  "license": "MIT",
  "main": "dist/less-syntax.js",
  "maintainers": [
    {
      "name": "shellscape",
      "email": "andrew@shellscape.org"
    },
    {
      "name": "webschik",
      "email": "webschik@gmail.com"
    }
  ],
  "name": "postcss-less",
  "optionalDependencies": {},
  "readme": "[PostCSS]: https://github.com/postcss/postcss\n[PostCSS-SCSS]: https://github.com/postcss/postcss-scss\n[LESS]: http://lesless.org\n[Autoprefixer]: https://github.com/postcss/autoprefixer\n[Stylelint]: http://stylelint.io/\n\n# PostCSS LESS Syntax [![Build Status](https://img.shields.io/travis/shellscape/postcss-less.svg?branch=develop)](https://travis-ci.org/webschik/postcss-less) [![npm Version](https://img.shields.io/npm/v/postcss-less.svg)](https://www.npmjs.com/package/postcss-less)\n\n[PostCSS] Syntax for parsing [LESS]\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     title=\"Philosopher's stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo.svg\">\n\nPlease note: poscss-less is not a LESS compiler. For compiling LESS, please use\nthe official toolset for LESS.\n\n## Getting Started\n\nFirst thing's first, install the module:\n\n```\nnpm install postcss-less --save-dev\n```\n\n## LESS Transformations\n\nThe most common use of `postcss-less` is for applying PostCSS transformations\ndirectly to LESS source. eg. ia theme written in LESS which uses [Autoprefixer]\nto add appropriate vendor prefixes.\n\n```js\nconst syntax = require('postcss-less');\npostcss(plugins)\n  .process(lessText, { syntax: syntax })\n  .then(function (result) {\n    result.content // LESS with transformations\n});\n```\n\n## Inline Comments\n\nParsing of single-line comments in CSS is also supported.\n\n```less\n:root {\n    // Main theme color\n    --color: red;\n}\n```\n\nNote that you don't need a custom stringifier to handle the output; the default\nstringifier will automatically convert single line comments into block comments.\nIf you need to support inline comments, please use a [custom PostCSSLess stringifier](#stringifier).\n\n## Rule Node\n\n[PostCSS Rule Node](https://github.com/postcss/postcss/blob/master/docs/api.md#rule-node)\n\n### rule.ruleWithoutBody\nDetermines whether or not a rule has a body, or content.\n\n```js\nimport postCssLess from 'postcss-less';\nconst less = `\n    .class2 {\n        &:extend(.class1);\n        .mixin-name(@param1, @param2);\n    }\n`;\nconst root = postCssLess.parse(less);\n\nroot.first.nodes[0].ruleWithoutBody // => true for &:extend\nroot.first.nodes[1].ruleWithoutBody // => true for calling of mixin\n```\n### rule.nodes\n\nAn `Array` of child nodes.\n\n**Note** that rules without body don't have this property.\n\n```js\nimport postCssLess from 'postcss-less';\nconst less = `\n    .class2 {\n        &:extend(.class1);\n        .mixin-name(@param1, @param2);\n    }\n`;\nconst root = postCssLess.parse(less);\n\nroot.first.nodes[0].nodes // => undefined for &:extend\nroot.first.nodes[1].nodes // => undefined for mixin calling\n```\n\n### rule.extendRule\n\nDetermines whether or not a rule is nested (eg.\n [extended](http://lesscss.org/features/#extend-feature-extend-inside-ruleset)).\n\n```js\nimport postCssLess from 'postcss-less';\nconst less = `\n    .class2 {\n        &:extend(.class1);\n    }\n`;\nconst root = postCssLess.parse(less);\n\nroot.first.nodes[0].extendRule // => true\n```\n\n## Comment Node\n\n[PostCSS Comment Node](https://github.com/postcss/postcss/blob/master/docs/api.md#comment-node)\n\n### comment.inline\n\nDetermines whether or not a comment is inline.\n\n```js\nimport postCssLess from 'postcss-less';\n\nconst root = postCssLess.parse('// Hello world');\n\nroot.first.inline // => true\n```\n\n### comment.block\n\nDetermines whether or not a comment is a block comment.\n\n```js\nimport postCssLess from 'postcss-less';\n\nconst root = postCssLess.parse('/* Hello world */');\n\nroot.first.block // => true\n```\n\n### comment.raws.begin\n\nPrecending characters of a comment node. eg. `//` or `/*`.\n\n### comment.raws.content\n\nRaw content of the comment.\n\n```js\nimport postCssLess from 'postcss-less';\n\nconst root = postCssLess.parse('// Hello world');\n\nroot.first.raws.content // => '// Hello world'\n```\n\n## Stringifying\n\nTo process LESS code without PostCSS transformations, custom stringifier\nshould be provided.\n\n```js\nimport postcss from 'postcss';\nimport postcssLess from 'postcss-less';\nimport stringify from 'postcss-less/less-stringify';\n\nconst lessCode = `\n    // Non-css comment\n\n    .container {\n        .mixin-1();\n        .mixin-2;\n        .mixin-3 (@width: 100px) {\n            width: @width;\n        }\n    }\n\n    .rotation(@deg:5deg){\n      .transform(rotate(@deg));\n    }\n`;\n\npostcss()\n  .process(less, {\n    syntax: postcssLess,\n    stringifier: stringify\n  })\n  .then((result) => {\n    console.log(result.content); // this will be value of `lessCode` without changing comments or mixins\n});\n```\n\n## Use Cases\n\n* Lint LESS code with 3rd-party plugins.\n* Apply PostCSS transformations (such as [Autoprefixer](https://github.com/postcss/autoprefixer)) directly to the LESS source code\n\n## Contribution\n\nPlease, check our guidelines: [CONTRIBUTING.md](./CONTRIBUTING.md)\n\n## Attribution\n\nThis module is based on the [postcss-scss](https://github.com/postcss/postcss-scss) library.\n\n[![npm Downloads](https://img.shields.io/npm/dt/postcss-less.svg)](https://www.npmjs.com/package/postcss-less)\n[![npm License](https://img.shields.io/npm/l/postcss-less.svg)](https://www.npmjs.com/package/postcss-less)\n[![js-strict-standard-style](https://img.shields.io/badge/code%20style-strict-117D6B.svg)](https://github.com/keithamus/eslint-config-strict)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webschik/postcss-less.git"
  },
  "scripts": {
    "prepublish": "gulp dist",
    "test": "gulp test:all"
  },
  "version": "0.16.1"
}
