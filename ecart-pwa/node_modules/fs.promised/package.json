{
  "_args": [
    [
      {
        "raw": "fs.promised@^3.0.0",
        "scope": null,
        "escapedName": "fs.promised",
        "name": "fs.promised",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli"
    ]
  ],
  "_from": "fs.promised@>=3.0.0 <4.0.0",
  "_id": "fs.promised@3.0.0",
  "_inCache": true,
  "_location": "/fs.promised",
  "_nodeVersion": "5.4.1",
  "_npmUser": {
    "name": "sdellysse",
    "email": "sdellysse@gmail.com"
  },
  "_npmVersion": "3.5.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fs.promised@^3.0.0",
    "scope": null,
    "escapedName": "fs.promised",
    "name": "fs.promised",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/preact-cli"
  ],
  "_resolved": "https://registry.npmjs.org/fs.promised/-/fs.promised-3.0.0.tgz",
  "_shasum": "ab77379f7c1ad0939e1262a8c2ced93fa6c39d3b",
  "_shrinkwrap": null,
  "_spec": "fs.promised@^3.0.0",
  "_where": "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli",
  "author": {
    "name": "Shawn Dellysse",
    "email": "sdellysse@gmail.com",
    "url": "http://shawndellysse.com"
  },
  "bugs": {
    "url": "https://github.com/shawndellysse/fs.promised/issues"
  },
  "dependencies": {},
  "description": "Promise-implementation-agnostic wrapper for fs",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "ab77379f7c1ad0939e1262a8c2ced93fa6c39d3b",
    "tarball": "https://registry.npmjs.org/fs.promised/-/fs.promised-3.0.0.tgz"
  },
  "gitHead": "dc9b82173fc80abfc082b5e3e3327ae01453ea8e",
  "homepage": "https://github.com/shawndellysse/fs.promised#readme",
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "sdellysse",
      "email": "sdellysse@gmail.com"
    }
  ],
  "name": "fs.promised",
  "optionalDependencies": {},
  "readme": "# Promise-implementation-agnostic wrapper for fs #\n\nPromises are great. Node's default implementation of the fs module, using\ncallbacks, are not. What's also not great is a fs wrapper that is dependant\nupon a specific promise implementation, especially since native promises have\nlanded in ES2015. This library intends to be a drop-in replacement for the\nbuilt-in fs module, where all the async functions now use Promises instead of\ncallbacks. Any other functions on the fs module are passed through untouched.\n\n## Notes ##\n* All the examples in this README will be using ES2015/ES2016. The library is\n  written in ES3 for maximum compatibility, but Promises are just so much easier\n  to work with in ES2015+.\n\n* By default, this library will use `global.Promise` as its promise\n  implementation. If you are using an older version of node, or want to use a\n  different Promise implementation for any reason, you need to do something\n  like this:\n\n  ```javascript\n  var fs = require(\"fs.promised/promisify\")(require(\"bluebird\"));\n  ```\n\n  The `promisify` include takes a second optional parameter, `shouldCache`,\n  which will cache the generated promise wrappers so that when `promisify` is\n  called in another module with the same Promise implementation the same wrapper\n  is returned. Set this to false if you wish to disable.\n\n## Usage ##\n\n```javascript\nconst fs = require(\"fs.promised\");\n\nconst doSomething_ES2015 = function () {\n    return fs.mkdir(\"/tmp/fs\")\n    .then(() => fs.writeFile(\"/tmp/fs/test\", \"blah blah blah\"))\n    .then(() => fs.unlink(\"/tmp/fs/test\"))\n    ;\n}\n\nconst doSomething_ES2016 = async function () {\n    await fs.mkdir(\"/tmp/fs\");\n    await fs.writeFile(\"/tmp/fs/test\", \"blah blah blah\");\n    await fs.unlink(\"/tmp/fs/test\");\n}\n```\n\n### Caveats ###\n\n* Exceptions:\n    If the wrapped function throws an error, the promise will be rejected with\n    the the erro. This shouldn't matter as async fs functions shouldn't throw\n    errors synchonously but the promise will still capture it if it does.\n\n* Callbacks with multiple success values:\n    This should only affect `fs.write` and `fs.read`. Functions that give a\n    callback more than one success value (as in, values after the first \"error\"\n    value) will be resolved with an array. Example:\n\n    ```javascript\n    const multiArgs_ES2015 = function () {\n        return fs.read(fd, data)\n        .then(([ written, string ]) => {\n            //...\n        })\n        ;\n    };\n\n    /* ES2016 */\n    const multiArgs_ES2016 = async function () {\n        let [written, string] = await fs.read(fd, data);\n        //...\n    };\n    ```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/shawndellysse/fs.promised.git"
  },
  "scripts": {},
  "version": "3.0.0"
}
