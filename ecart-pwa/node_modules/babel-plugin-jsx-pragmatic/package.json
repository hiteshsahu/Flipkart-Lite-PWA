{
  "_args": [
    [
      {
        "raw": "babel-plugin-jsx-pragmatic@^1.0.2",
        "scope": null,
        "escapedName": "babel-plugin-jsx-pragmatic",
        "name": "babel-plugin-jsx-pragmatic",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli"
    ]
  ],
  "_from": "babel-plugin-jsx-pragmatic@>=1.0.2 <2.0.0",
  "_id": "babel-plugin-jsx-pragmatic@1.0.2",
  "_inCache": true,
  "_location": "/babel-plugin-jsx-pragmatic",
  "_nodeVersion": "4.2.1",
  "_npmUser": {
    "name": "jmm",
    "email": "npm-public@jessemccarthy.net"
  },
  "_npmVersion": "2.14.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-plugin-jsx-pragmatic@^1.0.2",
    "scope": null,
    "escapedName": "babel-plugin-jsx-pragmatic",
    "name": "babel-plugin-jsx-pragmatic",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/preact-cli"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-jsx-pragmatic/-/babel-plugin-jsx-pragmatic-1.0.2.tgz",
  "_shasum": "41e2beb8642235f34b2a7ab12ca39e07201b8e59",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-jsx-pragmatic@^1.0.2",
  "_where": "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli",
  "author": {
    "name": "Jesse McCarthy",
    "url": "http://software.jessemccarthy.net/"
  },
  "bugs": {
    "url": "https://github.com/jmm/babel-plugin-jsx-pragmatic/issues"
  },
  "dependencies": {
    "babel-plugin-syntax-jsx": "^6.0.0"
  },
  "description": "Insert code to load a module corresponding to JSX pragma.",
  "devDependencies": {
    "babel-core": "^6.0.0",
    "babel-plugin-transform-react-jsx": "^6.0.0",
    "babel-preset-es2015": "^6.0.0",
    "lodash": "^3.10.0",
    "mocha": "^2.3.0",
    "sinon": "^1.17.0"
  },
  "directories": {},
  "dist": {
    "shasum": "41e2beb8642235f34b2a7ab12ca39e07201b8e59",
    "tarball": "https://registry.npmjs.org/babel-plugin-jsx-pragmatic/-/babel-plugin-jsx-pragmatic-1.0.2.tgz"
  },
  "files": [
    "jsx-pragmatic.js",
    "package.json",
    "README.md",
    "CHANGELOG.md",
    "LICENSE"
  ],
  "gitHead": "f171928cd48e5abd5890fb452cc7725390e07cb9",
  "homepage": "https://github.com/jmm/babel-plugin-jsx-pragmatic",
  "keywords": [
    "babel-plugin",
    "jsx",
    "react"
  ],
  "license": "MIT",
  "main": "jsx-pragmatic.js",
  "maintainers": [
    {
      "name": "jmm",
      "email": "npm-public@jessemccarthy.net"
    }
  ],
  "name": "babel-plugin-jsx-pragmatic",
  "optionalDependencies": {},
  "readme": "# About\n\n[babel-plugin-transform-react-jsx](https://www.npmjs.com/package/babel-plugin-transform-react-jsx) has a `pragma` option that's used when transforming JSX to function calls instead of the default function `React.createElement`.\n\nThis Babel plugin is a companion to that feature that allows you to dynamically load a module associated with the `pragma` value.\n\nFrom v1.0.0 this works with the Babel v6 plugin API, not v5.\n\nExample:\n\nGiven this file:\n\n```js\n<Some jsx=\"element\" />\n```\n\nbabel would normally transform the JSX to:\n\n```js\nReact.createElement(Some, { jsx: \"element\" });\n```\n\nBy setting the `pragma` option like this:\n\n```js\nbabel.transform(code, {\n  plugins: [\n    [\"babel-plugin-transform-react-jsx\", {\n      pragma: \"whatever\",\n    }],\n  ]\n})\n```\n\nIt would instead transform it to:\n\n```js\nwhatever(Some, { jsx: \"element\" });\n```\n\nHowever, you might need to load a module corresponding to `whatever` in each module containing JSX:\n\n```js\nimport whatever from \"whatever\";\n// or\nvar whatever = require(\"whatever\");\n```\n\nThis plugin allows you to make that part dynamic as well:\n\n```js\nbabel.transform(code, {\n  plugins: [\n    [\"babel-plugin-transform-react-jsx\", {\n      pragma: \"whatever\",\n    }],\n\n    [\"babel-plugin-jsx-pragmatic\", {\n      module: \"/something/whatever\",\n      import: \"whatever\"\n    }],\n  ]\n})\n```\n\nResults in:\n\n```js\nimport {default as whatever} from \"/something/whatever\";\n```\n\n## Options\n\n### `module`\n\nString. Module ID or pathname. The value of the `ModuleSpecifier` of an import. Required.\n\n### `import`\n\nString. The identifier that you want to import the `module` with. This should correspond to the root identifier of the `pragma` value. Required. Examples:\n\n```js\n{\n  plugins: [\n    [\"babel-plugin-transform-react-jsx\", {\n      pragma: \"x\",\n    }],\n\n    [\"babel-plugin-jsx-pragmatic\", {\n      module: \"/something/whatever\",\n      import: \"x\"\n    }],\n  ]\n}\n\n{\n  plugins: [\n    [\"babel-plugin-transform-react-jsx\", {\n      pragma: \"x.y\",\n    }],\n\n    [\"babel-plugin-jsx-pragmatic\", {\n      module: \"/something/whatever\",\n      import: \"x\"\n    }],\n  ]\n}\n```\n\n### `export`\n\nString. The export that you want to import as `import` from `module`. Default value is `default` (the default export). Examples:\n\n```js\n// Will import the default export (`default`)\n{\n  module: \"whatever\",\n  import: \"x\"\n}\n// import {default as x} from \"whatever\"\n\n\n// Will import the default export (`default`)\n{\n  module: \"whatever\",\n  import: \"x\",\n  export: \"default\",\n}\n// import {default as x} from \"whatever\"\n\n\n// Will import the export named `something`\n{\n  module: \"whatever\",\n  import: \"x\",\n  export: \"something\",\n}\n// import {something as x} from \"whatever\"\n```\n\n# Known Issues\n\n* Doesn't do anything special in the case that the file being transformed\n  already imports or declares an identifier with the same name as `import`.\n\n* Doesn't take into account when a file actually contains a JSX pragma comment.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jmm/babel-plugin-jsx-pragmatic.git"
  },
  "scripts": {
    "test": "mocha 'test/{unit,integration}.js'"
  },
  "version": "1.0.2"
}
