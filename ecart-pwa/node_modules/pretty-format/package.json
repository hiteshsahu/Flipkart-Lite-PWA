{
  "_args": [
    [
      {
        "raw": "pretty-format@^3.5.1",
        "scope": null,
        "escapedName": "pretty-format",
        "name": "pretty-format",
        "rawSpec": "^3.5.1",
        "spec": ">=3.5.1 <4.0.0",
        "type": "range"
      },
      "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-render-to-string"
    ]
  ],
  "_from": "pretty-format@>=3.5.1 <4.0.0",
  "_id": "pretty-format@3.8.0",
  "_inCache": true,
  "_location": "/pretty-format",
  "_nodeVersion": "5.12.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/pretty-format-3.8.0.tgz_1473558204046_0.3871619531419128"
  },
  "_npmUser": {
    "name": "thejameskyle",
    "email": "me@thejameskyle.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pretty-format@^3.5.1",
    "scope": null,
    "escapedName": "pretty-format",
    "name": "pretty-format",
    "rawSpec": "^3.5.1",
    "spec": ">=3.5.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/preact-render-to-string"
  ],
  "_resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-3.8.0.tgz",
  "_shasum": "bfbed56d5e9a776645f4b1ff7aa1a3ac4fa3c385",
  "_shrinkwrap": null,
  "_spec": "pretty-format@^3.5.1",
  "_where": "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-render-to-string",
  "author": {
    "name": "James Kyle",
    "email": "me@thejameskyle.com"
  },
  "bugs": {
    "url": "https://github.com/thejameskyle/pretty-format/issues"
  },
  "dependencies": {},
  "description": "Stringify any JavaScript value.",
  "devDependencies": {
    "chalk": "^1.1.3",
    "jest": "^15.1.1",
    "left-pad": "^1.1.1",
    "react": "15.3.0"
  },
  "directories": {},
  "dist": {
    "shasum": "bfbed56d5e9a776645f4b1ff7aa1a3ac4fa3c385",
    "tarball": "https://registry.npmjs.org/pretty-format/-/pretty-format-3.8.0.tgz"
  },
  "gitHead": "556f97f5ba896f15bf8e07e191636d31828f63a8",
  "homepage": "https://github.com/thejameskle/pretty-format",
  "jest": {
    "testEnvironment": "node",
    "verbose": true
  },
  "keywords": [],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "cpojer",
      "email": "christoph.pojer@gmail.com"
    },
    {
      "name": "thejameskyle",
      "email": "me@thejameskyle.com"
    }
  ],
  "name": "pretty-format",
  "optionalDependencies": {},
  "readme": "# pretty-format [![Travis build status](http://img.shields.io/travis/thejameskyle/pretty-format.svg?style=flat)](https://travis-ci.org/thejameskyle/pretty-format)\n\n> Stringify any JavaScript value.\n\n- Supports [all built-in JavaScript types](#type-support)\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd) (similar performance to v8's `JSON.stringify` and significantly faster than Node's `util.format`)\n- Plugin system for extending with custom types (i.e. [`ReactTestComponent`](#reacttestcomponent-plugin))\n\n\n## Installation\n\n```sh\n$ npm install pretty-format\n```\n\n## Usage\n\n```js\nvar prettyFormat = require('pretty-format');\n\nvar obj = { property: {} };\nobj.circularReference = obj;\nobj[Symbol('foo')] = 'foo';\nobj.map = new Map();\nobj.map.set('prop', 'value');\nobj.array = [1, NaN, Infinity];\n\nconsole.log(prettyFormat(obj));\n```\n\n**Result:**\n\n```js\nObject {\n  \"property\": Object {},\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\"\n  },\n  \"array\": Array [\n    1,\n    NaN,\n    Infinity\n  ],\n  Symbol(foo): \"foo\"\n}\n```\n\n#### Type Support\n\n`Object`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`, `arguments`, `Boolean`, `Date`, `Error`, `Function`, `Infinity`, `Map`, `NaN`, `null`, `Number`, `RegExp`, `Set`, `String`, `Symbol`, `undefined`, `WeakMap`, `WeakSet`\n\n### Plugins\n\nPretty format also supports adding plugins:\n\n```js\nvar fooPlugin = {\n  test: function(val) {\n    return val && val.hasOwnProperty('foo');\n  },\n  print: function(val, print, indent) {\n    return 'Foo: ' + print(val.foo);\n  }\n};\n\nvar obj = { foo: { bar: {} } };\n\nprettyFormat(obj, {\n  plugins: [fooPlugin]\n});\n// Foo: Object {\n//   \"bar\": Object {}\n// }\n```\n\n#### `ReactTestComponent` plugin\n\n```js\nvar prettyFormat = require('pretty-format');\nvar reactPlugin = require('pretty-format/plugins/ReactTestComponent');\n\nvar React = require('react');\nvar renderer = require('react/lib/ReactTestRenderer');\n\nvar jsx = React.createElement('h1', null, 'Hello World');\n\nprettyFormat(renderer.create(jsx).toJSON(), {\n  plugins: [reactPlugin]\n});\n// <h1>\n//   Hello World\n// </h1>\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/thejameskyle/pretty-format.git"
  },
  "scripts": {
    "perf": "node perf/test.js",
    "test": "jest"
  },
  "version": "3.8.0"
}
