{
  "_args": [
    [
      {
        "raw": "css-modules-require-hook@^4.1.0-beta",
        "scope": null,
        "escapedName": "css-modules-require-hook",
        "name": "css-modules-require-hook",
        "rawSpec": "^4.1.0-beta",
        "spec": ">=4.1.0-beta <5.0.0",
        "type": "range"
      },
      "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli"
    ]
  ],
  "_from": "css-modules-require-hook@>=4.1.0-beta <5.0.0",
  "_id": "css-modules-require-hook@4.1.0-beta",
  "_inCache": true,
  "_location": "/css-modules-require-hook",
  "_nodeVersion": "7.3.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/css-modules-require-hook-4.1.0-beta.tgz_1488737598059_0.9277409266214818"
  },
  "_npmUser": {
    "name": "sullenor",
    "email": "iamhoneyboy@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "css-modules-require-hook@^4.1.0-beta",
    "scope": null,
    "escapedName": "css-modules-require-hook",
    "name": "css-modules-require-hook",
    "rawSpec": "^4.1.0-beta",
    "spec": ">=4.1.0-beta <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/preact-cli"
  ],
  "_resolved": "https://registry.npmjs.org/css-modules-require-hook/-/css-modules-require-hook-4.1.0-beta.tgz",
  "_shasum": "7e6c0aa30cdbec6ad4e794662e6076638dcce107",
  "_shrinkwrap": null,
  "_spec": "css-modules-require-hook@^4.1.0-beta",
  "_where": "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli",
  "author": {
    "name": "Alexey Litvinov",
    "email": "iamhoneyboy@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/css-modules/css-modules-require-hook/issues"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "generic-names": "^1.0.1",
    "glob-to-regexp": "^0.1.0",
    "icss-replace-symbols": "^1.0.2",
    "in-publish": "^2.0.0",
    "lodash": "^4.3.0",
    "postcss": "^5.0.19",
    "postcss-modules-extract-imports": "^1.0.0",
    "postcss-modules-local-by-default": "^1.0.1",
    "postcss-modules-resolve-imports": "^1.0.0",
    "postcss-modules-scope": "^1.0.0",
    "postcss-modules-values": "^1.1.1",
    "seekout": "^1.0.1"
  },
  "description": "A require hook to compile CSS Modules on the fly",
  "devDependencies": {
    "babel-cli": "^6.5.1",
    "babel-preset-es2015": "^6.5.0",
    "babel-register": "^6.5.2",
    "isparta": "^4.0.0",
    "mocha": "^2.4.5",
    "postcss-less": "^0.2.0",
    "sinon": "^1.17.3"
  },
  "directories": {},
  "dist": {
    "shasum": "7e6c0aa30cdbec6ad4e794662e6076638dcce107",
    "tarball": "https://registry.npmjs.org/css-modules-require-hook/-/css-modules-require-hook-4.1.0-beta.tgz"
  },
  "engines": {
    "node": ">=0.12"
  },
  "gitHead": "dfe72a2726d6cd9c42a3530db40a33d67ad7aa85",
  "homepage": "https://github.com/css-modules/css-modules-require-hook",
  "keywords": [
    "css-modules",
    "require",
    "hook"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "sullenor",
      "email": "iamhoneyboy@gmail.com"
    }
  ],
  "name": "css-modules-require-hook",
  "optionalDependencies": {},
  "pre-commit": [],
  "readme": "css-modules-require-hook\n========================\n\nThe require hook compiles [CSS Modules](https://github.com/css-modules/css-modules) in runtime. This is similar to Babel's [babel/register](https://babeljs.io/docs/usage/require/). See the example: [demo](demo).\n\n## What is CSS Modules\n\nA **CSS Module** is a CSS file in which all class names and animation names are scoped locally by default. Learn more in the article [CSS Modules - Welcome to the Future](http://glenmaddern.com/articles/css-modules) by Glen&nbsp;Maddern.\n\n## Features\n\nCompiling in runtime, [universal](https://medium.com/@mjackson/universal-javascript-4761051b7ae9) usage.\n\n\n## Requirements\n\nTo use this tool we require [Node.js v0.12.x](https://github.com/nodejs/node) (or higher).\n\n## Installation\n\n```bash\n$ npm i css-modules-require-hook\n```\n\n## Usage\n\nNow, there are two ways to attach hook: manually or using preset file.\n\nThe first one allows you to pass options manually after module was required. Example:\n\n```javascript\nconst hook = require('css-modules-require-hook');\n\nhook({\n  generateScopedName: '[name]__[local]___[hash:base64:5]',\n});\n\n// const styles = require('./icon.css');\n```\n\nThe second one allows you to move options to the separate file `cmrh.conf.js`. Config file should be located in the same directory where executor is or in its ancestor directories. In that case hook will be attached right after the `css-modules-require-hook/preset` module will be required. Example:\n\n```javascript\n// cmrh.conf.js\nmodule.exports = {\n  generateScopedName: '[name]__[local]___[hash:base64:5]',\n};\n```\n\n```javascript\nrequire('css-modules-require-hook/preset');\n\n// const styles = require('./icon.css');\n```\n\n\n### Using with babel-node / ES6 Imports\nYou will need to create a `cmrh.conf.js` file within the directory as you are importing `css-modules-require-hook`.\n\n\n```javascript\n// server.js\nimport csshook from 'css-modules-require-hook/preset' // import hook before routes\nimport routes from '/shared/views/routes'\n\n// create server, etc\n```\n\n```javascript\n// cmrh.conf.js\nmodule.exports = {\n  // Same scope name as in webpack build\n  generateScopedName: '[name]__[local]___[hash:base64:5]',\n}\n```\n\n\n\n### Development mode\n\nUsually, Node.js caches all the `require` calls by default. In order to invalidate cache for the purpose of development you should set the environment variable `NODE_ENV` to `development`. For example:\n\n```bash\n$ NODE_ENV=development node server.js\n```\n\nStill you can use `devMode` option (see below) to override behavior which is imposed by environment variable.\n\n### Adding custom PostCSS plugins\n\n```javascript\nvar hook = require('css-modules-require-hook');\nvar cssnext = require('cssnext');\n\nhook({\n  prepend: [\n    // adding CSS Next plugin\n    cssnext(),\n  ],\n});\n```\n\n### Specify custom pattern to build generic names\n\n```javascript\nvar hook = require('css-modules-require-hook');\n\nhook({\n  generateScopedName: '[name]__[local]___[hash:base64:5]',\n});\n```\n\n### Using Stylus as a preprocessor\n\n```javascript\nvar hook = require('css-modules-require-hook');\nvar stylus = require('stylus');\n\nhook({\n  extensions: ['.styl'],\n  preprocessCss: function (css, filename) {\n    return stylus(css)\n      .set('filename', filename)\n      .render();\n  },\n});\n\n// var styles = require('./demo.styl');\n```\n\n## Tuning (options)\n\nTo adjust the require hook you need to provide params to the exported function.\n\n```javascript\nvar hook = require('css-modules-require-hook');\n\nhook({\n  // append: [],\n  // generateScopedName: function () {},\n  // or any other options\n  // see the list below\n});\n```\n\n### `devMode` boolean\n\nHelps you to invalidate cache of all `require` calls. Usually used for the development purpose. Also overrides behavior, imposed by `NODE_ENV` environment variable. For example:\n\n```javascript\nhook({\n  devMode: false,\n});\n```\n\n### `extensions` array\n\nAttach the require hook to additional file extensions (for example `['.scss']`).\n\n### `ignore` function|regex|string\n\nProvides possibility to exclude particular files from processing. Supports glob and regular expressions syntax. Also you may provide custom function.\n\n### `preprocessCss` function\n\nIn rare cases you may want to precompile styles, before they will be passed to the PostCSS pipeline. You should use **synchronous** transformations, since `require` function is synchronous.\n\n```javascript\nhook({\n  /**\n   * @param  {string} css\n   * @param  {string} filepath Absolute path to the file\n   * @return {string}\n   */\n  preprocessCss: function (css, filepath) {\n    return css;\n  }\n});\n```\n\n### `processCss` function\n\nIn rare cases you may want to get compiled styles in runtime, so providing this option helps.\n\n```javascript\nhook({\n  /**\n   * @param  {string} css\n   * @param  {string} filepath Absolute path to the file\n   */\n  processCss: function (css, filepath) { /* */ }\n});\n```\n\n### `processorOpts` object\n\nProvides possibility to pass custom options to the [LazyResult instance](https://github.com/postcss/postcss/blob/master/docs/api.md#processorprocesscss-opts). It can be usefull if you want to set the custom parser, for example: [postcss-less](https://github.com/gilt/postcss-less).\n\n```javascript\nconst hook = require('css-modules-require-hook');\nconst lessParser = require('postcss-less').parse;\n\nhook({\n  extensions: '.less',\n  processorOpts: {parser: lessParser},\n});\n```\n\n### `camelCase boolean`\n\nCamelizes exported class names. Similar to [css-loader?camelCase](https://github.com/webpack/css-loader#camel-case).\n\n### `append` array\n\nAppends custom plugins to the end of the PostCSS pipeline. Since the `require` function is synchronous, you should provide synchronous plugins only.\n\n### `prepend` array\n\nPrepends custom plugins to the beginning of the PostCSS pipeline. Since the `require` function is synchronous, you should provide synchronous plugins only.\n\n### `use` array\n\nProvides the full list of PostCSS plugins to the pipeline. Providing this cancels `append`, `prepend`, `createImportedName`, `generateScopedName` options. Synchronous plugins only.\n\n### `createImportedName` function\n\nShort alias for the [postcss-modules-extract-imports](https://github.com/css-modules/postcss-modules-extract-imports) plugin's `createImportedName` option.\n\n### `generateScopedName` string|function\n\nShort alias for the [postcss-modules-scope](https://github.com/css-modules/postcss-modules-scope) plugin's option. Helps you to specify the custom way to build generic names for the class selectors.\nYou may also use a string pattern similar to the webpack's [css-loader](https://github.com/webpack/css-loader#local-scope).\n\n```javascript\nhook({\n  generateScopedName: '[name]__[local]___[hash:base64:5]'\n});\n```\n\nor\n\n```javascript\nhook({\n  /**\n   * @param  {string} name     Usually a class name\n   * @param  {string} filepath\n   * @param  {string} css\n   * @return {string}\n   */\n  generateScopedName: function (name, filepath, css) {\n    return name;\n  }\n});\n```\n\n### `hashPrefix` string\n\nShort alias for the [generic-names](https://github.com/css-modules/generic-names) helper option.\nProvides additional hash uniqueness. Might be useful for projects with several stylesheets sharing a same name.\n\n### `mode` string\n\nShort alias for the [postcss-modules-local-by-default](https://github.com/css-modules/postcss-modules-local-by-default) plugin's option.\n\n### `rootDir` string\n\nProvides absolute path to the project directory. Providing this will result in better generated class names. It can be obligatory, if you run require hook and build tools (like [css-modulesify](https://github.com/css-modules/css-modulesify)) from different working directories.\n\n\n## Debugging\n\n[debug](https://www.npmjs.com/package/debug) package is used for debugging. So to turn it on simply specify the **DEBUG** environment variable:\n- `DEBUG=css-modules:fetch` &mdash; to see resolved paths to the files.\n- `DEBUG=css-modules:preset` &mdash; to see whether config was found or not.\n- `DEBUG=css-modules:setup` &mdash; to see the new options list.\n- `DEBUG=css-modules:*` &mdash; to see everything.\n\n## Links\n\n- Electron support: [css-modules-electron](https://github.com/KenPowers/css-modules-electron)\n\n## License\n\n> The MIT License\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/css-modules/css-modules-require-hook.git"
  },
  "scripts": {
    "build": "babel lib --out-dir lib && babel preset.js --out-file preset.js",
    "cleanup": "git reset --hard",
    "prepublish": "in-publish && npm run -s build || in-install",
    "publish": "in-publish && npm run -s cleanup || in-install",
    "test": "npm run test:babel",
    "test:babel": "NODE_PATH=$(pwd)/test/tokens/node_modules $npm_package_scripts_test_unit --compilers js:babel-register",
    "test:coverage": "NODE_PATH=$(pwd)/test/tokens/node_modules babel-node --presets es2015 `npm bin`/isparta cover --report text --report html `npm bin`/_mocha -- --require test/setup.js --ui tdd test/*/*.js",
    "test:node": "NODE_PATH=$(pwd)/test/tokens/node_modules $npm_package_scripts_test_unit --use_strict",
    "test:unit": "mocha --require test/setup.js --ui tdd test/*/*.js",
    "test:watch": "NODE_PATH=$(pwd)/test/tokens/node_modules $npm_package_scripts_test_unit --watch --use_strict"
  },
  "version": "4.1.0-beta"
}
