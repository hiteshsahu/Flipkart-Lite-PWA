'use strict';

exports.__esModule = true;

var _asyncCommand = require('../lib/async-command');

var _asyncCommand2 = _interopRequireDefault(_asyncCommand);

var _fs = require('fs.promised');

var _fs2 = _interopRequireDefault(_fs);

var _recursiveCopy = require('recursive-copy');

var _recursiveCopy2 = _interopRequireDefault(_recursiveCopy);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _es6Promisify = require('es6-promisify');

var _es6Promisify2 = _interopRequireDefault(_es6Promisify);

var _crossSpawnPromise = require('cross-spawn-promise');

var _crossSpawnPromise2 = _interopRequireDefault(_crossSpawnPromise);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var TEMPLATES = {
	default: 'examples/root',
	empty: 'examples/empty',
	full: 'examples/full',
	simple: 'examples/simple'
};

exports.default = (0, _asyncCommand2.default)({
	command: 'create <name> [dest]',

	desc: 'Create a new application.',

	builder: {
		name: {
			description: 'directory and package name for the new app'
		},
		dest: {
			description: 'Directory to create the app within',
			defaultDescription: '<name>'
		},
		type: {
			description: 'A project template to start from',
			choices: ['default', 'full', 'simple', 'empty'],
			default: 'default'
		},
		less: {
			description: 'Pre-install LESS support',
			type: 'boolean',
			default: false
		},
		sass: {
			description: 'Pre-install SASS/SCSS support',
			type: 'boolean',
			default: false
		}
	},

	handler(argv) {
		return _asyncToGenerator(function* () {
			var template = TEMPLATES[argv.type];

			if (!template) {
				throw Error(`Unknown app template "${argv.type}".`);
			}

			var target = _path2.default.resolve(process.cwd(), argv.dest || argv.name);

			var exists = false;
			try {
				exists = (yield _fs2.default.stat(target)).isDirectory();
			} catch (err) {}

			if (exists) {
				throw Error('Directory already exists.');
			}

			var spinner = (0, _ora2.default)({
				text: 'Creating project',
				color: 'magenta'
			}).start();

			yield (0, _es6Promisify2.default)(_mkdirp2.default)(target);

			yield (0, _recursiveCopy2.default)(_path2.default.resolve(__dirname, '../..', template), target, { filter: ['**/*', '!build'] });

			spinner.text = 'Initializing project';

			yield npm(target, ['init', '-y']);

			var pkg = JSON.parse((yield _fs2.default.readFile(_path2.default.resolve(target, 'package.json'))));

			pkg.scripts = {
				start: 'if-env NODE_ENV=production && npm run -s serve || npm run -s dev',
				build: 'preact build',
				serve: 'preact build && preact serve',
				dev: 'preact watch',
				test: 'eslint src && preact test'
			};

			pkg.eslintConfig = {
				extends: 'eslint-config-synacor'
			};

			yield _fs2.default.writeFile(_path2.default.resolve(target, 'package.json'), JSON.stringify(pkg, null, 2));

			spinner.text = 'Installing dev dependencies';

			yield npm(target, ['install', '--save-dev', 'preact-cli', 'if-env', 'eslint']);

			spinner.text = 'Installing dependencies';

			yield npm(target, ['install', '--save', 'preact', 'preact-compat', 'preact-router']);

			spinner.succeed('Done!\n');

			return `
			To get started, cd into the new directory:
			  \u001b[32mcd ${_path2.default.relative(process.cwd(), target)}\u001b[39m

			To start a development live-reload server:
			  \u001b[32mnpm start\u001b[39m

			To create a production build in build/:
			  \u001b[32mnpm run build\u001b[39m

			To start a production HTTP/2 server:
			  \u001b[32mnpm run serve\u001b[39m
		`.trim().replace(/^\t+/gm, '') + '\n';
		})();
	}
});


var npm = function npm(cwd, args) {
	return (0, _crossSpawnPromise2.default)('npm', args, { cwd, stdio: 'ignore' });
};