'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var serve = function () {
	var _ref = _asyncToGenerator(function* (options) {
		var dir = _path2.default.resolve(options.cwd || process.cwd(), options.dir || '.');

		var configFile = options.config ? options.config : _path2.default.resolve(__dirname, '../resources/static-app.json');
		var config = yield readJson(configFile);

		config.public = dir;

		var pushManifest = yield readJson(_path2.default.resolve(dir, 'push-manifest.json'));
		if (pushManifest) {
			config.headers = [].concat(config.headers || [], createHeadersFromPushManifest(pushManifest));
		}

		configFile = yield tmpFile({ postfix: '.json' });
		yield _fs2.default.writeFile(configFile, JSON.stringify(config));

		yield serveHttp2({
			config: configFile,
			configObj: config,
			server: options.server,
			port: options.port,
			dir,
			cwd: _path2.default.resolve(__dirname, '../resources')
		});
	});

	return function serve(_x) {
		return _ref.apply(this, arguments);
	};
}();

var readJson = function () {
	var _ref3 = _asyncToGenerator(function* (filename) {
		try {
			return JSON.parse((yield _fs2.default.readFile(filename, 'utf8')));
		} catch (e) {}
	});

	return function readJson(_x2) {
		return _ref3.apply(this, arguments);
	};
}();

var _asyncCommand = require('../lib/async-command');

var _asyncCommand2 = _interopRequireDefault(_asyncCommand);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs.promised');

var _fs2 = _interopRequireDefault(_fs);

var _tmp = require('tmp');

var _tmp2 = _interopRequireDefault(_tmp);

var _child_process = require('child_process');

var _simplehttp2server = require('simplehttp2server');

var _simplehttp2server2 = _interopRequireDefault(_simplehttp2server);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (0, _asyncCommand2.default)({
	command: 'serve [dir]',

	desc: 'Start an HTTP2 static fileserver.',

	builder: {
		dir: {
			description: 'Directory root to serve static files from.',
			default: 'build'
		},
		cwd: {
			description: 'The working directory in which to spawn a server.',
			defaultDescription: '.'
		},
		server: {
			description: 'Which server to run, or "config" to produce a firebase config.',
			choices: ['simplehttp2server', 'superstatic', 'config'],
			default: 'simplehttp2server'
		},
		dest: {
			description: 'Directory or filename where firebase.json should be written\n  (used for --server config)',
			defaultDescription: '-'
		},
		port: {
			description: 'Port to start a server on',
			default: '8080',
			alias: 'p'
		}
	},

	handler(argv) {
		return _asyncToGenerator(function* () {
			yield serve(argv);
		})();
	}
});

function createHeadersFromPushManifest(pushManifest) {
	var headers = [];

	for (var source in pushManifest) {
		if (pushManifest.hasOwnProperty(source)) {
			var section = pushManifest[source],
			    links = [];

			for (var file in section) {
				if (section.hasOwnProperty(file)) {
					links.push(_extends({
						url: '/' + file.replace(/^\//g, '')
					}, section[file]));
				}
			}

			links = links.sort(function (a, b) {
				var diff = b.weight - a.weight;
				if (!diff) {
					if (b.url.match(/bundle\.js$/)) return 1;
					return b.url.match(/\.js$/) ? 1 : 0;
				}
				return diff;
			});

			headers.push({
				source,
				headers: [{
					key: 'Link',
					value: links.map(function (_ref2) {
						var url = _ref2.url,
						    type = _ref2.type;
						return `<${url}>; rel=preload; as=${type}`;
					}).join(', ')
				}]
			});
		}
	}

	return headers;
}

var serveHttp2 = function serveHttp2(options) {
	return Promise.resolve(options).then(SERVERS[options.server || 'simplehttp2server']).then(function (args) {
		return new Promise(function (resolve, reject) {
			if (typeof args === 'string') {
				process.stdout.write(args + '\n');
				return resolve();
			}

			var child = (0, _child_process.execFile)(args[0], args.slice(1), {
				cwd: options.cwd,
				encoding: 'utf8'
			}, function (err, stdout, stderr) {
				if (err) process.stderr.write('\n  server error> ' + err + '\n' + stderr);else process.stdout.write('\n  server spawned> ' + stdout);

				if (err) return reject(err + '\n' + stderr);else resolve();
			});

			function proxy(type) {
				child[type].on('data', function (data) {
					data = data.replace(/^(\s*\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2})?\s*/gm, '');
					if (data.match(/\bRequest for\b/gim)) return;
					process[type].write(`  \u001b[32m${data}\u001b[39m`);
				});
			}
			proxy('stdout');
			proxy('stderr');
			process.stdin.pipe(child.stdin);
		});
	});
};

var SERVERS = {
	simplehttp2server(options) {
		return [_simplehttp2server2.default, '-cors', '*', '-config', options.config, '-listen', `:${options.port || 8080}`];
	},
	superstatic(options) {
		return ['superstatic', _path2.default.relative(options.cwd, options.dir), '--gzip', '-p', options.port || 8080, '-c', JSON.stringify(_extends({}, options.configObj, { public: undefined }))];
	},

	config(options) {
		return _asyncToGenerator(function* () {
			var dir = process.cwd(),
			    outfile = void 0;
			if (options.dest && options.dest !== '-') {
				var isDir = false;
				try {
					isDir = (yield _fs2.default.stat()).isDirectory();
				} catch (e) {}
				if (isDir) {
					dir = options.dest;
					outfile = 'firebase.json';
				} else {
					dir = _path2.default.dirname(options.dest);
					outfile = _path2.default.basename(options.dest);
				}
			}

			var config = JSON.stringify(_extends({}, options.configObj, {
				public: _path2.default.relative(dir, options.configObj.public)
			}), null, 2);

			if (outfile) {
				yield _fs2.default.writeFile(_path2.default.resolve(dir, outfile), config);
			} else {
				return config;
			}
		})();
	}
};

var tmpFile = function tmpFile(opts) {
	return new Promise(function (resolve, reject) {
		_tmp2.default.file(opts, function (err, path) {
			if (err) reject(err);else resolve(path);
		});
	});
};