'use strict';

exports.__esModule = true;

var _asyncCommand = require('../lib/async-command');

var _asyncCommand2 = _interopRequireDefault(_asyncCommand);

var _webpackConfig = require('../lib/webpack-config');

var _webpackConfig2 = _interopRequireDefault(_webpackConfig);

var _runWebpack = require('../lib/run-webpack');

var _runWebpack2 = _interopRequireDefault(_runWebpack);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (0, _asyncCommand2.default)({
	command: 'watch [src]',

	desc: 'Start a development live-reload server.',

	builder: {
		src: {
			description: 'Entry file (index.js)',
			default: 'src'
		},
		port: {
			description: 'Port to start a server on',
			default: '8080',
			alias: 'p'
		},
		host: {
			description: 'Hostname to start a server on',
			default: '0.0.0.0',
			alias: 'h'
		},
		prerender: {
			description: 'Pre-render static app content on initial build',
			default: false
		}
	},

	handler(argv) {
		return _asyncToGenerator(function* () {
			argv.production = false;
			var config = (0, _webpackConfig2.default)(argv);

			var stats = yield (0, _runWebpack2.default)(true, config, _runWebpack.showStats);
			(0, _runWebpack.showStats)(stats);
		})();
	}
});