'use strict';

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _crossSpawnPromise = require('cross-spawn-promise');

var _crossSpawnPromise2 = _interopRequireDefault(_crossSpawnPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CACHE = {};

function isInstalled(dep) {
	return CACHE[dep] || (CACHE[dep] = new Promise(function (resolve) {
		_fs2.default.stat(resolve('node_modules', dep), function (err) {
			resolve(!err);
		});
	}));
}

function installDeps(deps, save) {
	process.stdout.write(`\nInstalling ${deps.join(' ')}..`);
	return (0, _crossSpawnPromise2.default)('npm', ['install', save && (save === 'dev' ? '--save-dev' : '--save'), '--prefix', process.cwd()].concat(deps).filter(Boolean)).then(function () {
		process.stdout.write(` ..${deps.length} installed.\n`);
	});
}

module.exports = function (source, map) {
	var query = _loaderUtils2.default.getOptions(this) || {};

	var deps = query.modules;
	if (typeof deps === 'string') deps = deps.split(/\s*,\s*/);else if (!Array.isArray(deps)) deps = [deps];

	if (!deps.length) return { source, map };

	var callback = this.async();

	Promise.all(deps.map(isInstalled)).then(function (installed) {
		var toInstall = deps.filter(function (dep, index) {
			return !installed[index];
		});

		if (toInstall.length) {
			return installDeps(toInstall, query.save);
		}
	}).then(function () {
		return callback(null, source, map);
	}).catch(function (err) {
		return callback(`Error installing dependencies: ${err}`);
	});
};