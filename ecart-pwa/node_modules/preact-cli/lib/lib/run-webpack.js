'use strict';

exports.__esModule = true;
exports.showStats = showStats;

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackDevServer = require('webpack-dev-server');

var _webpackDevServer2 = _interopRequireDefault(_webpackDevServer);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
	var watch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	var config = arguments[1];
	var onprogress = arguments[2];
	return new Promise(function (resolve, reject) {
		var compiler = (0, _webpack2.default)(config);

		var done = function done(err, stats) {
			if (err) reject(err);else {
				setTimeout(function () {
					resolve(stats);
				}, 20);
			}
		};

		if (watch) {
			var first = true;
			compiler.plugin('done', function (stats) {
				if (first) {
					first = false;
					var serverAddr = `${config.https === true ? 'https' : 'http'}://${process.env.HOST || config.host || 'localhost'}:${process.env.PORT || config.port || 8080}`;
					process.stdout.write(`  \u001b[32m> Development server started at ${serverAddr}\u001b[39m\n`);
				}
				if (onprogress) onprogress(stats);
			});
			compiler.plugin('failed', reject);

			var server = new _webpackDevServer2.default(compiler, config.devServer);
			server.listen(config.devServer.port);
		} else {
			compiler.run(done);
		}
	});
};

function showStats(stats) {
	var info = stats.toJson();

	if (stats.hasErrors()) {
		info.errors.forEach(function (message) {
			process.stderr.write(message + '\n');
		});
	}

	if (stats.hasWarnings()) {
		info.warnings.forEach(function (message) {
			process.stderr.write(_chalk2.default.yellow(message) + '\n');
		});
	}

	return stats;
}