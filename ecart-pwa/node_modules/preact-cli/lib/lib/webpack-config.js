'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _fs = require('fs');

var _minimatch = require('minimatch');

var _webpack = require('@webpack-blocks/webpack2');

var _babel = require('@webpack-blocks/babel6');

var _babel2 = _interopRequireDefault(_babel);

var _devServer = require('@webpack-blocks/dev-server2');

var _devServer2 = _interopRequireDefault(_devServer);

var _extractTextWebpackPlugin = require('extract-text-webpack-plugin');

var _extractTextWebpackPlugin2 = _interopRequireDefault(_extractTextWebpackPlugin);

var _autoprefixer = require('autoprefixer');

var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

var _htmlWebpackPlugin = require('html-webpack-plugin');

var _htmlWebpackPlugin2 = _interopRequireDefault(_htmlWebpackPlugin);

var _scriptExtHtmlWebpackPlugin = require('script-ext-html-webpack-plugin');

var _scriptExtHtmlWebpackPlugin2 = _interopRequireDefault(_scriptExtHtmlWebpackPlugin);

var _progressBarWebpackPlugin = require('progress-bar-webpack-plugin');

var _progressBarWebpackPlugin2 = _interopRequireDefault(_progressBarWebpackPlugin);

var _copyWebpackPlugin = require('copy-webpack-plugin');

var _copyWebpackPlugin2 = _interopRequireDefault(_copyWebpackPlugin);

var _replaceBundleWebpackPlugin = require('replace-bundle-webpack-plugin');

var _replaceBundleWebpackPlugin2 = _interopRequireDefault(_replaceBundleWebpackPlugin);

var _swPrecacheWebpackPlugin = require('sw-precache-webpack-plugin');

var _swPrecacheWebpackPlugin2 = _interopRequireDefault(_swPrecacheWebpackPlugin);

var _babelConfig = require('./babel-config');

var _babelConfig2 = _interopRequireDefault(_babelConfig);

var _prerender = require('./prerender');

var _prerender2 = _interopRequireDefault(_prerender);

var _pushManifest = require('./push-manifest');

var _pushManifest2 = _interopRequireDefault(_pushManifest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function readJson(file) {
	if (file in readJson.cache) return readJson.cache[file];
	var ret = void 0;
	try {
		ret = JSON.parse((0, _fs.readFileSync)(file));
	} catch (e) {}
	return readJson.cache[file] = ret;
}
readJson.cache = {};

exports.default = function (env) {
	var cwd = env.cwd = (0, _path.resolve)(env.cwd || process.cwd());
	var src = function src(dir) {
		return (0, _path.resolve)(env.cwd, env.src || 'src', dir);
	};

	var hasSrc = false;
	try {
		hasSrc = (0, _fs.statSync)(src('.')).isDirectory();
	} catch (e) {}
	if (!hasSrc) env.src = '.';

	env.pkg = readJson((0, _path.resolve)(cwd, 'package.json')) || {};
	env.manifest = readJson(src('manifest.json')) || {};

	return _webpack.createConfig.vanilla([(0, _webpack.setContext)(src('.')), (0, _webpack.entryPoint)((0, _path.resolve)(__dirname, './entry')), (0, _webpack.setOutput)({
		path: (0, _path.resolve)(cwd, env.dest || 'build'),
		publicPath: '/',
		filename: 'bundle.js',
		chunkFilename: '[name].chunk.[chunkhash].js'
	}), (0, _webpack.customConfig)({
		resolve: {
			modules: ['node_modules', (0, _path.resolve)(__dirname, '../../node_modules')],
			extensions: ['.js', '.jsx', '.ts', '.tsx', '.json', '.less', '.scss', '.sass', '.css'],
			alias: {
				'preact-cli-entrypoint': src('index.js'),
				'preact-cli-polyfills': (0, _path.resolve)(__dirname, 'polyfills.js'),
				style: src('style'),
				preact$: 'preact/dist/preact.min.js',

				react: 'preact-compat',
				'react-dom': 'preact-compat',
				'react-addons-css-transition-group': 'preact-css-transition-group'
			}
		},
		resolveLoader: {
			alias: {
				'async': (0, _path.resolve)(__dirname, './async-component-loader')
			},
			modules: [(0, _path.resolve)(__dirname, '../../node_modules'), (0, _path.resolve)(cwd, 'node_modules')]
		}
	}), (0, _babel2.default)(_extends({
		exclude: [],
		include(filepath) {
			if (filepath.indexOf(src('.')) === 0 || filepath.indexOf((0, _path.resolve)(__dirname, '../..')) === 0 || filepath.split(/[/\\]/).indexOf('node_modules') === -1) return true;
			var manifest = (0, _path.resolve)(filepath.replace(/(.*([\/\\]node_modules|\.\.)[\/\\](@[^\/\\]+[\/\\])?[^\/\\]+)([\/\\].*)?$/g, '$1'), 'package.json'),
			    pkg = readJson(manifest) || {};
			return !!(pkg.module || pkg['jsnext:main']);
		},
		babelrc: false
	}, (0, _babelConfig2.default)(env))), (0, _webpack.customConfig)({
		module: {
			loaders: [{
				test: /\.jsx?$/,
				include: [(0, _minimatch.filter)(src('routes') + '/{*.js,*/index.js}'), (0, _minimatch.filter)(src('components') + '/{routes,async}/{*.js,*/index.js}')],
				loader: (0, _path.resolve)(__dirname, './async-component-loader'),
				options: {
					name(filename) {
						var relative = filename.replace(src('.'), '');
						var isRoute = filename.indexOf('/routes/') >= 0;

						return isRoute ? 'route-' + relative.replace(/(^\/(routes|components\/(routes|async))\/|(\/index)?\.js$)/g, '') : false;
					},
					formatName(filename) {
						var relative = filename.replace(src('.'), '');

						return relative.replace(/(^\/(routes|components\/(routes|async))\/|(\/index)?\.js$)/g, '');
					}
				}
			}]
		}
	}), (0, _webpack.customConfig)({
		module: {
			loaders: [{
				enforce: 'pre',
				test: /\.less$/,
				use: [{
					loader: (0, _path.resolve)(__dirname, './npm-install-loader'),
					options: {
						modules: ['less', 'less-loader'],
						save: true
					}
				}, {
					loader: 'less-loader',
					options: { sourceMap: true }
				}]
			}, {
				enforce: 'pre',
				test: /\.s[ac]ss$/,
				use: [{
					loader: (0, _path.resolve)(__dirname, './npm-install-loader'),
					options: {
						modules: ['node-sass', 'sass-loader'],
						save: true
					}
				}, {
					loader: 'sass-loader',
					options: { sourceMap: true }
				}]
			}, {
				test: /\.(css|less|s[ac]ss)$/,
				include: [src('components'), src('routes')],
				loader: _extractTextWebpackPlugin2.default.extract({
					fallback: 'style-loader',
					use: [`css-loader?modules&localIdentName=[local]__[hash:base64:5]&importLoaders=1&sourceMap=${env.production}`, `postcss-loader`]
				})
			}, {
				test: /\.(css|less|s[ac]ss)$/,
				exclude: [src('components'), src('routes')],
				loader: _extractTextWebpackPlugin2.default.extract({
					fallback: 'style-loader',
					use: [`css-loader?sourceMap=${env.production}`, `postcss-loader`]
				})
			}]
		}
	}), (0, _webpack.customConfig)({
		module: {
			loaders: [{
				test: /\.json$/,
				loader: 'json-loader'
			}, {
				test: /\.(xml|html|txt|md)$/,
				loader: 'raw-loader'
			}, {
				test: /\.(svg|woff2?|ttf|eot|jpe?g|png|gif)(\?.*)?$/i,
				loader: env.production ? 'file-loader' : 'url-loader'
			}]
		}
	}), (0, _webpack.addPlugins)([new _webpack.webpack.LoaderOptionsPlugin({
		options: {
			postcss: function postcss() {
				return [(0, _autoprefixer2.default)({
					browsers: ['last 2 versions']
				})];
			},
			context: (0, _path.resolve)(cwd, env.src || 'src')
		}
	})]), (0, _webpack.defineConstants)({
		'process.env.NODE_ENV': env.production ? 'production' : 'development'
	}), env.production && (0, _webpack.performance)(Object.assign({
		maxAssetSize: 200 * 1000,
		maxEntrypointSize: 200 * 1000,
		hints: 'warning'
	}, env.pkg.performance || {})), (0, _webpack.setDevTool)(env.production ? 'source-map' : 'cheap-module-eval-source-map'), (0, _webpack.customConfig)({
		node: {
			console: false,
			process: false,
			Buffer: false,
			__filename: false,
			__dirname: false,
			setImmediate: false
		}
	}), (0, _webpack.addPlugins)([new _copyWebpackPlugin2.default([{ from: 'manifest.json' }, { from: 'assets', to: 'assets' }])]), (0, _webpack.addPlugins)([new _extractTextWebpackPlugin2.default({
		filename: 'style.css',
		disable: !env.production,
		allChunks: true
	})]), htmlPlugin(env), env.production ? production(env) : development(env), (0, _webpack.addPlugins)([new _webpack.webpack.NoEmitOnErrorsPlugin(), new _progressBarWebpackPlugin2.default({
		format: '\u001b[90m\u001b[44mBuild\u001b[49m\u001b[39m [:bar] \u001b[32m\u001b[1m:percent\u001b[22m\u001b[39m (:elapseds) \u001b[2m:msg\u001b[22m',
		renderThrottle: 100,
		summary: false,
		clear: true
	}), new _webpack.webpack.optimize.CommonsChunkPlugin({
		async: false,
		children: true,
		minChunks: 3
	}), new _pushManifest2.default()])].filter(Boolean));
};

var development = function development(config) {
	var port = process.env.PORT || config.port || 8080,
	    host = process.env.HOST || config.host || '0.0.0.0',
	    origin = `${config.https === true ? 'https' : 'http'}://${host}:${port}/`;

	return (0, _webpack.group)([(0, _devServer2.default)({
		port,
		host,
		inline: true,
		hot: true,
		https: config.https === true,
		compress: true,
		publicPath: '/',
		contentBase: (0, _path.resolve)(config.cwd, config.src || './src'),

		disableHostCheck: true,
		historyApiFallback: true,
		quiet: true,
		clientLogLevel: 'none',
		overlay: false,
		stats: 'minimal',
		watchOptions: {
			ignored: [(0, _path.resolve)(config.cwd, 'build'), (0, _path.resolve)(config.cwd, 'node_modules')]
		}
	}, [`webpack-dev-server/client?${origin}`, `webpack/hot/dev-server?${origin}`])]);
};

var production = function production() {
	return (0, _webpack.addPlugins)([new _webpack.webpack.LoaderOptionsPlugin({
		minimize: true
	}), new _replaceBundleWebpackPlugin2.default([{
		partten: /throw\s+(new\s+)?(Type|Reference)?Error\s*\(/g,
		replacement: function replacement() {
			return 'return;(';
		}
	}]), new _webpack.webpack.optimize.UglifyJsPlugin({
		output: {
			comments: false
		},
		mangle: true,
		compress: {
			unsafe_comps: true,
			properties: true,
			keep_fargs: false,
			pure_getters: true,
			collapse_vars: true,
			unsafe: true,
			warnings: false,
			screw_ie8: true,
			sequences: true,
			dead_code: true,
			drop_debugger: true,
			comparisons: true,
			conditionals: true,
			evaluate: true,
			booleans: true,
			loops: true,
			unused: true,
			hoist_funs: true,
			if_return: true,
			join_vars: true,
			cascade: true,
			drop_console: false,
			pure_funcs: ['classCallCheck', '_classCallCheck', '_possibleConstructorReturn', 'Object.freeze', 'invariant', 'warning']
		}
	}), new _swPrecacheWebpackPlugin2.default({
		filename: 'sw.js',
		navigateFallback: 'index.html',
		minify: true,
		staticFileGlobsIgnorePatterns: [/\.map$/, /push-manifest\.json$/]
	})]);
};

var htmlPlugin = function htmlPlugin(config) {
	return (0, _webpack.addPlugins)([new _htmlWebpackPlugin2.default({
		filename: 'index.html',
		template: `!!ejs-loader!${config.template || (0, _path.resolve)(__dirname, '../resources/template.html')}`,
		minify: {
			collapseWhitespace: true,
			removeComments: true
		},
		favicon: 'assets/favicon.ico',
		manifest: config.manifest,
		inject: true,
		compile: true,
		preload: config.preload === true,
		title: config.title || config.manifest.name || config.manifest.short_name || (config.pkg.name || '').replace(/^@[a-z]\//, '') || 'Preact App',
		config,
		ssr(params) {
			return config.prerender ? (0, _prerender2.default)(config, params) : '';
		}
	}), new _scriptExtHtmlWebpackPlugin2.default({
		defaultAttribute: 'async'
	})]);
};