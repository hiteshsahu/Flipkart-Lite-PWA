{
  "_args": [
    [
      {
        "raw": "less-loader@^4.0.3",
        "scope": null,
        "escapedName": "less-loader",
        "name": "less-loader",
        "rawSpec": "^4.0.3",
        "spec": ">=4.0.3 <5.0.0",
        "type": "range"
      },
      "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli"
    ]
  ],
  "_from": "less-loader@>=4.0.3 <5.0.0",
  "_id": "less-loader@4.0.3",
  "_inCache": true,
  "_location": "/less-loader",
  "_nodeVersion": "7.7.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/less-loader-4.0.3.tgz_1490897838453_0.23240861087106168"
  },
  "_npmUser": {
    "name": "jhnns",
    "email": "mail@johannesewald.de"
  },
  "_npmVersion": "4.4.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "less-loader@^4.0.3",
    "scope": null,
    "escapedName": "less-loader",
    "name": "less-loader",
    "rawSpec": "^4.0.3",
    "spec": ">=4.0.3 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/preact-cli"
  ],
  "_resolved": "https://registry.npmjs.org/less-loader/-/less-loader-4.0.3.tgz",
  "_shasum": "d1e6462ca2f090c11248455e14b8dda4616d0521",
  "_shrinkwrap": null,
  "_spec": "less-loader@^4.0.3",
  "_where": "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli",
  "author": {
    "name": "Johannes Ewald @jhnns"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/less-loader/issues"
  },
  "dependencies": {
    "clone": "^2.1.1",
    "loader-utils": "^1.1.0",
    "pify": "^2.3.0"
  },
  "description": "Less loader for webpack. Compiles Less to CSS.",
  "devDependencies": {
    "babel-cli": "^6.24.0",
    "babel-jest": "^19.0.0",
    "babel-plugin-transform-object-rest-spread": "^6.23.0",
    "babel-polyfill": "^6.23.0",
    "babel-preset-env": "^1.2.2",
    "cross-env": "^3.2.4",
    "del-cli": "^0.2.1",
    "eslint": "^3.18.0",
    "eslint-config-webpack": "^1.2.1",
    "eslint-plugin-import": "^2.2.0",
    "inspect-loader": "^1.0.0",
    "jest": "^19.0.2",
    "less": "^2.3.1",
    "lint-staged": "^3.4.0",
    "nodemon": "^1.11.0",
    "nsp": "^2.6.3",
    "pre-commit": "^1.2.2",
    "standard-version": "^4.0.0",
    "webpack": "^2.3.2",
    "webpack-defaults": "^0.4.5"
  },
  "directories": {},
  "dist": {
    "shasum": "d1e6462ca2f090c11248455e14b8dda4616d0521",
    "tarball": "https://registry.npmjs.org/less-loader/-/less-loader-4.0.3.tgz"
  },
  "engines": {
    "node": ">=4.3 <5.0.0 || >=5.10"
  },
  "files": [
    "README.md",
    "LICENSE",
    "dist"
  ],
  "gitHead": "e8b7d48a43ebbe82a818efa33efdb6fcf36c4a61",
  "homepage": "https://github.com/webpack-contrib/less-loader#readme",
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "d3viant0ne",
      "email": "wiens.joshua@gmail.com"
    },
    {
      "name": "ericclemmons",
      "email": "eric@smarterspam.com"
    },
    {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    },
    {
      "name": "thelarkinn",
      "email": "sean.larkin@cuw.edu"
    }
  ],
  "name": "less-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "less": "^2.3.1",
    "webpack": "^2.2.0"
  },
  "pre-commit": "lint-staged",
  "readme": "[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![npm-stats][npm-stats]][npm-url]\n[![deps][deps]][deps-url]\n[![travis][travis]][travis-url]\n[![appveyor][appveyor]][appveyor-url]\n[![coverage][coverage]][coverage-url]\n[![chat][chat]][chat-url]\n\n<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://cdn.worldvectorlogo.com/logos/less-63.svg\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n<h1 align=\"center\">less-loader</h1>\n\n<p align=\"center\">Compiles Less to CSS.</p>\n\nUse the [css-loader](https://github.com/webpack-contrib/css-loader) or the [raw-loader](https://github.com/webpack-contrib/raw-loader) to turn it into a JS module and the [ExtractTextPlugin](https://github.com/webpack-contrib/extract-text-webpack-plugin) to extract it into a separate file.\n\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm install --save-dev less-loader less\n```\n\nThe less-loader requires [less](https://github.com/less/less.js) as [`peerDependency`](https://docs.npmjs.com/files/package.json#peerdependencies). Thus you are able to control the versions accurately.\n\n<h2 align=\"center\">Examples</h2>\n\nChain the less-loader with the [css-loader](https://github.com/webpack-contrib/css-loader) and the [style-loader](https://github.com/webpack-contrib/style-loader) to immediately apply all styles to the DOM.\n\n```js\n// webpack.config.js\nmodule.exports = {\n    ...\n    module: {\n        rules: [{\n            test: /\\.less$/,\n            use: [{\n                loader: \"style-loader\" // creates style nodes from JS strings\n            }, {\n                loader: \"css-loader\" // translates CSS into CommonJS\n            }, {\n                loader: \"less-loader\" // compiles Less to CSS\n            }]\n        }]\n    }\n};\n```\n\nYou can pass any Less specific options to the less-loader via [loader options](https://webpack.js.org/configuration/module/#rule-options-rule-query). See the [Less documentation](http://lesscss.org/usage/#command-line-usage-options) for all available options in dash-case. Since we're passing these options to Less programmatically, you need to pass them in camelCase here:\n\n```js\n// webpack.config.js\nmodule.exports = {\n    ...\n    module: {\n        rules: [{\n            test: /\\.less$/,\n            use: [{\n                loader: \"style-loader\"\n            }, {\n                loader: \"css-loader\"\n            }, {\n                loader: \"less-loader\", options: {\n                    strictMath: true,\n                    noIeCompat: true\n                }\n            }]\n        }]\n    }\n};\n```\n\nUnfortunately, Less doesn't map all options 1-by-1 to camelCase. When in doubt, [check their executable and search for the dash-case option](https://github.com/less/less.js/blob/3.x/bin/lessc).\n\n### In production\n\nUsually, it's recommended to extract the style sheets into a dedicated file in production using the [ExtractTextPlugin](https://github.com/webpack-contrib/extract-text-webpack-plugin). This way your styles are not dependent on JavaScript:\n\n```js\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\nconst extractLess = new ExtractTextPlugin({\n    filename: \"[name].[contenthash].css\",\n    disable: process.env.NODE_ENV === \"development\"\n});\n\nmodule.exports = {\n    ...\n    module: {\n        rules: [{\n            test: /\\.less$/,\n            use: extractLess.extract({\n                use: [{\n                    loader: \"css-loader\"\n                }, {\n                    loader: \"less-loader\"\n                }],\n                // use style-loader in development\n                fallback: \"style-loader\"\n            })\n        }]\n    },\n    plugins: [\n        extractLess\n    ]\n};\n```\n\n<h2 align=\"center\">Usage</h2>\n\n### Imports\n\nStarting with less-loader 4, you can now choose between Less' builtin resolver and webpack's resolver. By default, webpack's resolver is used.\n\n#### webpack resolver\n\nwebpack provides an [advanced mechanism to resolve files](https://webpack.js.org/configuration/resolve/). The less-loader applies a Less plugin that passes all queries to the webpack resolver. Thus you can import your Less modules from `node_modules`. Just prepend them with a `~` which tells webpack to look up the [`modules`](https://webpack.js.org/configuration/resolve/#resolve-modules).\n\n```css\n@import \"~bootstrap/less/bootstrap\";\n```\n\nIt's important to only prepend it with `~`, because `~/` resolves to the home-directory. webpack needs to distinguish between `bootstrap` and `~bootstrap`, because CSS and Less files have no special syntax for importing relative files. Writing `@import \"file\"` is the same as `@import \"./file\";`\n\n##### Non-Less imports\n\nUsing webpack's resolver, you can import any file type. You just need a loader that exports valid Less code. Often, you will also want to set the `issuer` condition to ensure that this rule is only applied on imports originating from Less files:\n\n```js\n// webpack.config.js\nmodule.exports = {\n    ...\n    module: {\n        rules: [{\n            test: /\\.js$/,\n            issuer: /\\.less$/,\n            use: [{\n                loader: \"js-to-less-loader\"\n            }]\n        }]\n    }\n};\n```\n\n#### Less resolver\n\nIf you specify the `paths` option, the less-loader will not use webpack's resolver. Modules, that can't be resolved in the local folder, will be searched in the given `paths`. This is Less' default behavior. `paths` should be an array with absolute paths:\n\n```js\n// webpack.config.js\nmodule.exports = {\n    ...\n    module: {\n        rules: [{\n            test: /\\.less$/,\n            use: [{\n                loader: \"style-loader\"\n            }, {\n                loader: \"css-loader\"\n            }, {\n                loader: \"less-loader\", options: {\n                    paths: [\n                        path.resolve(__dirname, \"node_modules\")\n                    ]\n                }\n            }]\n        }]\n    }\n};\n```\n\nIn this case, all webpack features like importing non-Less files or aliasing won't work of course.\n\n### Plugins\n\nIn order to use [plugins](http://lesscss.org/usage/#plugins), simply set the `plugins` option like this:\n\n```js\n// webpack.config.js\nconst CleanCSSPlugin = require(\"less-plugin-clean-css\");\n\nmodule.exports = {\n    ...\n            {\n                loader: \"less-loader\", options: {\n                    plugins: [\n                        new CleanCSSPlugin({ advanced: true })\n                    ]\n                }\n            }]\n    ...\n};\n```\n\n### Extracting style sheets\n\nBundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or [hot module replacement](https://webpack.js.org/concepts/hot-module-replacement/) in development. In production, on the other hand, it's not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a [FOUC](https://en.wikipedia.org/wiki/Flash_of_unstyled_content) might be visible. Thus it's often still better to have them as separate files in your final production build.\n\nThere are two possibilities to extract a style sheet from the bundle:\n\n- [extract-loader](https://github.com/peerigon/extract-loader) (simpler, but specialized on the css-loader's output)\n- [extract-text-webpack-plugin](https://github.com/webpack-contrib/extract-text-webpack-plugin) (more complex, but works in all use-cases)\n\n### Source maps\n\nTo enable CSS source maps, you'll need to pass the `sourceMap` option to the less-loader *and* the css-loader. Your `webpack.config.js` should look like this:\n\n```javascript\nmodule.exports = {\n    ...\n    module: {\n        rules: [{\n            test: /\\.less$/,\n            use: [{\n                loader: \"style-loader\"\n            }, {\n                loader: \"css-loader\", options: {\n                    sourceMap: true\n                }\n            }, {\n                loader: \"less-loader\", options: {\n                    sourceMap: true\n                }\n            }]\n        }]\n    }\n};\n```\n\nAlso checkout the [sourceMaps example](/examples/sourceMaps).\n\nIf you want to edit the original Less files inside Chrome, [there's a good blog post](https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0). The blog post is about Sass but it also works for Less.\n\n### CSS modules gotcha\n\nThere is a known problem with Less and [CSS modules](https://github.com/css-modules/css-modules) regarding relative file paths in `url(...)` statements. [See this issue for an explanation](https://github.com/webpack-contrib/less-loader/issues/109#issuecomment-253797335).\n\n<h2 align=\"center\">Maintainer</h2>\n\n<table>\n    <tr>\n      <td align=\"center\">\n        <a href=\"https://github.com/jhnns\"><img width=\"150\" height=\"150\" src=\"https://github.com/jhnns.png?s=150\"></a>\n        <br>\n        <a href=\"https://github.com/jhnns\">Johannes Ewald</a>\n      </td>\n    <tr>\n</table>\n\n\n[npm]: https://img.shields.io/npm/v/less-loader.svg\n[npm-stats]: https://img.shields.io/npm/dm/less-loader.svg\n[npm-url]: https://npmjs.com/package/less-loader\n\n[node]: https://img.shields.io/node/v/less-loader.svg\n[node-url]: https://nodejs.org\n\n[deps]: https://david-dm.org/webpack-contrib/less-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/less-loader\n\n[travis]: http://img.shields.io/travis/webpack-contrib/less-loader.svg\n[travis-url]: https://travis-ci.org/webpack-contrib/less-loader\n\n[appveyor-url]: https://ci.appveyor.com/project/jhnns/less-loader/branch/master\n[appveyor]: https://ci.appveyor.com/api/projects/status/github/webpack-contrib/less-loader?svg=true\n\n[coverage]: https://img.shields.io/codecov/c/github/webpack-contrib/less-loader.svg\n[coverage-url]: https://codecov.io/gh/webpack-contrib/less-loader\n\n[chat]: https://badges.gitter.im/webpack-contrib/webpack.svg\n[chat-url]: https://gitter.im/webpack-contrib/webpack\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/webpack-contrib/less-loader.git"
  },
  "scripts": {
    "appveyor:test": "npm test",
    "build": "cross-env NODE_ENV=production babel -s true src -d dist --ignore 'src/**/*.test.js'",
    "clean:dist": "del-cli dist",
    "create-spec": "babel-node test/helpers/createSpec.js",
    "lint": "eslint --cache src test",
    "lint-staged": "lint-staged",
    "posttest": "npm run lint",
    "prebuild": "yarn run clean:dist",
    "prepublish": "yarn run build",
    "pretest": "npm run create-spec",
    "release": "yarn run standard-version",
    "security": "nsp check",
    "serve:dev": "nodemon $2 --exec babel-node",
    "start": "yarn run serve:dev src",
    "test": "jest",
    "test:coverage": "jest --collectCoverageFrom='src/**/*.js' --coverage",
    "test:watch": "jest --watch",
    "travis:coverage": "yarn run test:coverage",
    "travis:lint": "yarn run lint && yarn run security",
    "travis:test": "yarn run test",
    "webpack-defaults": "webpack-defaults"
  },
  "version": "4.0.3"
}
