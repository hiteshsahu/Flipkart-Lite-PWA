{"version":3,"sources":["../src/index.js"],"names":["fetch","url","options","Promise","resolve","reject","response","let","header","keys","all","headers","request","getAllResponseHeaders","replace","m","key","value","push","toLowerCase","ok","status","statusText","responseURL","clone","text","responseText","json","then","JSON","parse","xml","responseXML","blob","Blob","entries","get","n","has","XMLHttpRequest","open","method","i","setRequestHeader","withCredentials","credentials","onload","onerror","send","body"],"mappings":"sKAAA,MAA6B,kBAAPA,OAAoBA,MAAQ,SAASC,EAAKC,GAE/D,MADAA,GAAUA,MACH,GAAIC,SAAS,SAACC,EAASC,GAmB7B,QAASC,KACRC,GAGCC,GAHGC,KACHC,KACAC,IAUD,OAPAC,GAAQC,wBAAwBC,QAAQ,0BAA2B,SAACC,EAAGC,EAAKC,GAC3ER,EAAKS,KAAKF,EAAMA,EAAIG,eACpBT,EAAIQ,MAAMF,EAAKC,IACfT,EAASG,EAAQK,GACjBL,EAAQK,GAAOR,EAASA,EAAS,IAAIS,EAAUA,KAI/CG,GAA8B,IAAzBR,EAAQS,OAAO,IAAI,GACxBA,OAAQT,EAAQS,OAChBC,WAAYV,EAAQU,WACpBrB,IAAKW,EAAQW,YACbC,MAAOlB,EACPmB,KAAM,WAAG,MAAGtB,SAAQC,QAAQQ,EAAQc,eACpCC,KAAM,WAAG,MAAGxB,SAAQC,QAAQQ,EAAQc,cAAcE,KAAKC,KAAKC,QAC5DC,IAAK,WAAG,MAAG5B,SAAQC,QAAQQ,EAAQoB,cACnCC,KAAM,WAAG,MAAG9B,SAAQC,QAAQ,GAAI8B,OAAMtB,EAAQN,aAC9CK,SACCF,KAAM,WAAG,MAAGA,IACZ0B,QAAS,WAAG,MAAGzB,IACf0B,IAAK,SAAAC,GAAE,MAAG1B,GAAQ0B,EAAElB,gBACpBmB,IAAK,SAAAD,GAAE,MAAGA,GAAElB,eAAiBR,MA7ChCJ,GAAIK,GAAU,GAAI2B,eAElB3B,GAAQ4B,KAAKtC,EAAQuC,QAAU,MAAOxC,EAEtC,KAAKM,GAAImC,KAAKxC,GAAQS,QACrBC,EAAQ+B,iBAAiBD,EAAGxC,EAAQS,QAAQ+B,GAG7C9B,GAAQgC,gBAAuC,WAArB1C,EAAQ2C,YAElCjC,EAAQkC,OAAS,WAChB1C,EAAQE,MAGTM,EAAQmC,QAAU1C,EAElBO,EAAQoC,KAAK9C,EAAQ+C","file":"unfetch.umd.js","sourcesContent":["export default typeof fetch=='function' ? fetch : function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tlet request = new XMLHttpRequest();\n\n\t\trequest.open(options.method || 'get', url);\n\n\t\tfor (let i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\trequest.onload = () => {\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.send(options.body);\n\n\t\tfunction response() {\n\t\t\tlet keys = [],\n\t\t\t\tall = [],\n\t\t\t\theaders = {},\n\t\t\t\theader;\n\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):\\s*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theader = headers[key];\n\t\t\t\theaders[key] = header ? `${header},${value}` : value;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tok: (request.status/200|0) == 1,\t\t// 200-399\n\t\t\t\tstatus: request.status,\n\t\t\t\tstatusText: request.statusText,\n\t\t\t\turl: request.responseURL,\n\t\t\t\tclone: response,\n\t\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\t\tjson: () => Promise.resolve(request.responseText).then(JSON.parse),\n\t\t\t\txml: () => Promise.resolve(request.responseXML),\n\t\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\t\theaders: {\n\t\t\t\t\tkeys: () => keys,\n\t\t\t\t\tentries: () => all,\n\t\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n}\n"]}