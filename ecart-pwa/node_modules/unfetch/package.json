{
  "_args": [
    [
      {
        "raw": "unfetch@^2.1.2",
        "scope": null,
        "escapedName": "unfetch",
        "name": "unfetch",
        "rawSpec": "^2.1.2",
        "spec": ">=2.1.2 <3.0.0",
        "type": "range"
      },
      "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli"
    ]
  ],
  "_from": "unfetch@>=2.1.2 <3.0.0",
  "_id": "unfetch@2.1.2",
  "_inCache": true,
  "_location": "/unfetch",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/unfetch-2.1.2.tgz_1488551688408_0.40959061589092016"
  },
  "_npmUser": {
    "name": "developit",
    "email": "jason@developit.ca"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "unfetch@^2.1.2",
    "scope": null,
    "escapedName": "unfetch",
    "name": "unfetch",
    "rawSpec": "^2.1.2",
    "spec": ">=2.1.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/isomorphic-unfetch",
    "/preact-cli"
  ],
  "_resolved": "https://registry.npmjs.org/unfetch/-/unfetch-2.1.2.tgz",
  "_shasum": "684fee4d8acdb135bdb26c0364c642fc326ca95b",
  "_shrinkwrap": null,
  "_spec": "unfetch@^2.1.2",
  "_where": "D:\\Git Clone Directory\\Flipkart-Lite-PWA\\ecart-pwa\\node_modules\\preact-cli",
  "authors": [
    "Jason Miller <jason@developit.ca>"
  ],
  "bugs": {
    "url": "https://github.com/developit/unfetch/issues"
  },
  "dependencies": {},
  "description": "Bare minimum fetch polyfill in 500 bytes",
  "devDependencies": {
    "babel-core": "^6.9.1",
    "babel-eslint": "^7.1.1",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.9.0",
    "chai": "^3.5.0",
    "cross-env": "^3.1.4",
    "eslint": "^3.13.1",
    "gzip-size-cli": "^1.0.0",
    "mkdirp": "^0.5.1",
    "mocha": "^3.2.0",
    "npm-run-all": "^2.1.1",
    "rimraf": "^2.5.2",
    "rollup": "^0.41.4",
    "rollup-plugin-buble": "^0.15.0",
    "rollup-plugin-post-replace": "^1.0.0",
    "sinon": "^1.17.4",
    "sinon-chai": "^2.8.0",
    "strip-json-comments-cli": "^1.0.1",
    "uglify-js": "^2.6.2"
  },
  "directories": {},
  "dist": {
    "shasum": "684fee4d8acdb135bdb26c0364c642fc326ca95b",
    "tarball": "https://registry.npmjs.org/unfetch/-/unfetch-2.1.2.tgz"
  },
  "eslintConfig": {
    "parser": "babel-eslint",
    "extends": "eslint:recommended",
    "env": {
      "browser": true,
      "mocha": true,
      "node": true,
      "es6": true
    },
    "globals": {
      "expect": true
    }
  },
  "files": [
    "src",
    "dist",
    "polyfill.js"
  ],
  "gitHead": "edc961b06b4a971381e6261201485907e4a0d6d1",
  "homepage": "https://github.com/developit/unfetch",
  "jsnext:main": "dist/unfetch.es.js",
  "keywords": [
    "fetch",
    "polyfill",
    "xhr",
    "ajax"
  ],
  "license": "MIT",
  "main": "dist/unfetch.js",
  "maintainers": [
    {
      "name": "developit",
      "email": "jason@developit.ca"
    }
  ],
  "module": "dist/unfetch.es.js",
  "name": "unfetch",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <img src=\"https://i.imgur.com/JaXEFNp.png\" width=\"300\" height=\"300\" alt=\"unfetch\">\n  <br>\n  <a href=\"https://www.npmjs.org/package/unfetch\"><img src=\"https://img.shields.io/npm/v/unfetch.svg?style=flat\" alt=\"npm\"></a> <a href=\"https://travis-ci.org/developit/unfetch\"><img src=\"https://travis-ci.org/developit/unfetch.svg?branch=master\" alt=\"travis\"></a>\n</p>\n\n# unfetch\n\n> Tiny 500b fetch \"barely-polyfill\"\n\n-   **Tiny:** under **500 bytes** of [ES3](https://unpkg.com/unfetch) gzipped\n-   **Minimal:** just `fetch()` with headers and text/json/xml responses\n-   **Familiar:** a subset of the full API\n-   **Supported:** supports IE8+ _(assuming `Promise` is polyfilled of course!)_\n-   **Standalone:** one function, no dependencies\n-   **Modern:** written in ES2015, transpiled to 500b of old-school JS\n\n> 🤔 **What's Missing?**\n>\n> -   Uses simple Arrays instead of Iterables, since Arrays _are_ iterables\n> -   No streaming, just Promisifies existing XMLHttpRequest response bodies\n\n* * *\n\n## Table of Contents\n\n-   [Install](#install)\n-   [Usage](#usage)\n-   [Examples & Demos](#examples--demos)\n-   [API](#api)\n-   [Contribute](#contribute)\n-   [License](#license)\n\n* * *\n\n## Install\n\nThis project uses [node](http://nodejs.org) and [npm](https://npmjs.com). Go check them out if you don't have them locally installed.\n\n```sh\n$ npm install --save unfetch\n```\n\nThen with a module bundler like [rollup](http://rollupjs.org/) or [webpack](https://webpack.js.org/), use as you would anything else:\n\n```javascript\n// using ES6 modules\nimport fetch from 'unfetch'\n\n// using CommonJS modules\nvar fetch = require('unfetch')\n```\n\nThe [UMD](https://github.com/umdjs/umd) build is also available on [unpkg](https://unpkg.com):\n\n```html\n<script src=\"//unpkg.com/unfetch/dist/unfetch.umd.js\"></script>\n```\n\nThis exposes the `unfetch()` function as a global.\n\n* * *\n\n## Usage\n\nAs a [**ponyfill**](https://ponyfill.com):\n\n```js\nimport fetch from 'unfetch';\n\nfetch('/foo.json')\n  .then( r => r.json() )\n  .then( data => {\n    console.log(data);\n  });\n```\n\nGlobally, as a [**polyfill**](https://ponyfill.com/#polyfill):\n\n```js\nimport 'unfetch/polyfill';\n\n// \"fetch\" is now installed globally if it wasn't already available\n\nfetch('/foo.json')\n  .then( r => r.json() )\n  .then( data => {\n    console.log(data);\n  });\n```\n\n## Examples & Demos\n\n[**Real Example on JSFiddle**](https://jsfiddle.net/developit/qrh7tLc0/) ➡️\n\n```js\n// simple GET request:\nfetch('/foo')\n  .then( r => r.text() )\n  .then( txt => console.log(txt) )\n\n\n// complex POST request with JSON, headers:\nfetch('/bear', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ hungry: true })\n}).then( r => {\n  open(r.headers.get('location'));\n  return r.json();\n})\n```\n\n* * *\n\n## Contribute\n\nFirst off, thanks for taking the time to contribute!\nNow, take a moment to be sure your contributions make sense to everyone else.\n\n### Reporting Issues\n\nFound a problem? Want a new feature? First of all see if your issue or idea has [already been reported](../../issues).\nIf it hasn't, just open a [new clear and descriptive issue](../../issues/new).\n\n### Submitting pull requests\n\nPull requests are the greatest contributions, so be sure they are focused in scope, and do avoid unrelated commits.\n\n> 💁 **Remember: size is the #1 priority.**\n>\n> Every byte counts! PR's can't be merged if they increase the output size much.\n\n-   Fork it!\n-   Clone your fork: `git clone https://github.com/<your-username>/unfetch`\n-   Navigate to the newly cloned directory: `cd unfetch`\n-   Create a new branch for the new feature: `git checkout -b my-new-feature`\n-   Install the tools necessary for development: `npm install`\n-   Make your changes.\n-   `npm run build` to verify your change doesn't increase output size.\n-   `npm test` to make sure your change doesn't break anything.\n-   Commit your changes: `git commit -am 'Add some feature'`\n-   Push to the branch: `git push origin my-new-feature`\n-   Submit a pull request with full remarks documenting your changes.\n\n## License\n\n[MIT License](LICENSE.md) © [Jason Miller](https://jasonformat.com/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/developit/unfetch.git"
  },
  "scripts": {
    "build": "npm-run-all --silent clean -p rollup:* -p minify:* -s size",
    "clean": "rimraf dist && mkdirp dist",
    "minify:cjs": "uglifyjs $npm_package_main -cm toplevel -o $npm_package_main -p relative --in-source-map ${npm_package_main}.map --source-map ${npm_package_main}.map",
    "minify:umd": "uglifyjs $npm_package_umd_main -cm -o $npm_package_umd_main -p relative --in-source-map ${npm_package_umd_main}.map --source-map ${npm_package_umd_main}.map",
    "prepublish": "npm run -s build",
    "release": "npm run build -s && git commit -am $npm_package_version && git tag $npm_package_version && git push && git push --tags && npm publish",
    "rollup:cjs": "cross-env FORMAT=cjs rollup -c rollup.config.js -f cjs -n $npm_package_name -o $npm_package_main",
    "rollup:esm": "rollup -c rollup.config.js -f es -n $npm_package_name -o $npm_package_module",
    "rollup:umd": "cross-env FORMAT=umd rollup -c rollup.config.js -f umd -n $npm_package_name -o $npm_package_umd_main",
    "size": "echo \"Gzipped Size: $(strip-json-comments --no-whitespace $npm_package_main | gzip-size)\"",
    "test": "eslint src test && mocha --compilers js:babel-register test/**/*.js"
  },
  "umd:main": "dist/unfetch.umd.js",
  "version": "2.1.2"
}
